// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.3
// source: recordcollection.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RecordCollectionService_GetWants_FullMethodName     = "/recordcollection.RecordCollectionService/GetWants"
	RecordCollectionService_UpdateRecord_FullMethodName = "/recordcollection.RecordCollectionService/UpdateRecord"
	RecordCollectionService_UpdateWant_FullMethodName   = "/recordcollection.RecordCollectionService/UpdateWant"
	RecordCollectionService_AddRecord_FullMethodName    = "/recordcollection.RecordCollectionService/AddRecord"
	RecordCollectionService_DeleteRecord_FullMethodName = "/recordcollection.RecordCollectionService/DeleteRecord"
	RecordCollectionService_QueryRecords_FullMethodName = "/recordcollection.RecordCollectionService/QueryRecords"
	RecordCollectionService_GetRecord_FullMethodName    = "/recordcollection.RecordCollectionService/GetRecord"
	RecordCollectionService_Trigger_FullMethodName      = "/recordcollection.RecordCollectionService/Trigger"
	RecordCollectionService_GetUpdates_FullMethodName   = "/recordcollection.RecordCollectionService/GetUpdates"
	RecordCollectionService_GetOrder_FullMethodName     = "/recordcollection.RecordCollectionService/GetOrder"
	RecordCollectionService_CommitRecord_FullMethodName = "/recordcollection.RecordCollectionService/CommitRecord"
	RecordCollectionService_GetPrice_FullMethodName     = "/recordcollection.RecordCollectionService/GetPrice"
	RecordCollectionService_GetInventory_FullMethodName = "/recordcollection.RecordCollectionService/GetInventory"
	RecordCollectionService_DeleteSale_FullMethodName   = "/recordcollection.RecordCollectionService/DeleteSale"
)

// RecordCollectionServiceClient is the client API for RecordCollectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecordCollectionServiceClient interface {
	GetWants(ctx context.Context, in *GetWantsRequest, opts ...grpc.CallOption) (*GetWantsResponse, error)
	UpdateRecord(ctx context.Context, in *UpdateRecordRequest, opts ...grpc.CallOption) (*UpdateRecordsResponse, error)
	UpdateWant(ctx context.Context, in *UpdateWantRequest, opts ...grpc.CallOption) (*UpdateWantResponse, error)
	AddRecord(ctx context.Context, in *AddRecordRequest, opts ...grpc.CallOption) (*AddRecordResponse, error)
	DeleteRecord(ctx context.Context, in *DeleteRecordRequest, opts ...grpc.CallOption) (*DeleteRecordResponse, error)
	QueryRecords(ctx context.Context, in *QueryRecordsRequest, opts ...grpc.CallOption) (*QueryRecordsResponse, error)
	GetRecord(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (*GetRecordResponse, error)
	Trigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*TriggerResponse, error)
	GetUpdates(ctx context.Context, in *GetUpdatesRequest, opts ...grpc.CallOption) (*GetUpdatesResponse, error)
	GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error)
	CommitRecord(ctx context.Context, in *CommitRecordRequest, opts ...grpc.CallOption) (*CommitRecordResponse, error)
	GetPrice(ctx context.Context, in *GetPriceRequest, opts ...grpc.CallOption) (*GetPriceResponse, error)
	GetInventory(ctx context.Context, in *GetInventoryRequest, opts ...grpc.CallOption) (*GetInventoryResponse, error)
	DeleteSale(ctx context.Context, in *DeleteSaleRequest, opts ...grpc.CallOption) (*DeleteSaleResponse, error)
}

type recordCollectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordCollectionServiceClient(cc grpc.ClientConnInterface) RecordCollectionServiceClient {
	return &recordCollectionServiceClient{cc}
}

func (c *recordCollectionServiceClient) GetWants(ctx context.Context, in *GetWantsRequest, opts ...grpc.CallOption) (*GetWantsResponse, error) {
	out := new(GetWantsResponse)
	err := c.cc.Invoke(ctx, RecordCollectionService_GetWants_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordCollectionServiceClient) UpdateRecord(ctx context.Context, in *UpdateRecordRequest, opts ...grpc.CallOption) (*UpdateRecordsResponse, error) {
	out := new(UpdateRecordsResponse)
	err := c.cc.Invoke(ctx, RecordCollectionService_UpdateRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordCollectionServiceClient) UpdateWant(ctx context.Context, in *UpdateWantRequest, opts ...grpc.CallOption) (*UpdateWantResponse, error) {
	out := new(UpdateWantResponse)
	err := c.cc.Invoke(ctx, RecordCollectionService_UpdateWant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordCollectionServiceClient) AddRecord(ctx context.Context, in *AddRecordRequest, opts ...grpc.CallOption) (*AddRecordResponse, error) {
	out := new(AddRecordResponse)
	err := c.cc.Invoke(ctx, RecordCollectionService_AddRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordCollectionServiceClient) DeleteRecord(ctx context.Context, in *DeleteRecordRequest, opts ...grpc.CallOption) (*DeleteRecordResponse, error) {
	out := new(DeleteRecordResponse)
	err := c.cc.Invoke(ctx, RecordCollectionService_DeleteRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordCollectionServiceClient) QueryRecords(ctx context.Context, in *QueryRecordsRequest, opts ...grpc.CallOption) (*QueryRecordsResponse, error) {
	out := new(QueryRecordsResponse)
	err := c.cc.Invoke(ctx, RecordCollectionService_QueryRecords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordCollectionServiceClient) GetRecord(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (*GetRecordResponse, error) {
	out := new(GetRecordResponse)
	err := c.cc.Invoke(ctx, RecordCollectionService_GetRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordCollectionServiceClient) Trigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*TriggerResponse, error) {
	out := new(TriggerResponse)
	err := c.cc.Invoke(ctx, RecordCollectionService_Trigger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordCollectionServiceClient) GetUpdates(ctx context.Context, in *GetUpdatesRequest, opts ...grpc.CallOption) (*GetUpdatesResponse, error) {
	out := new(GetUpdatesResponse)
	err := c.cc.Invoke(ctx, RecordCollectionService_GetUpdates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordCollectionServiceClient) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error) {
	out := new(GetOrderResponse)
	err := c.cc.Invoke(ctx, RecordCollectionService_GetOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordCollectionServiceClient) CommitRecord(ctx context.Context, in *CommitRecordRequest, opts ...grpc.CallOption) (*CommitRecordResponse, error) {
	out := new(CommitRecordResponse)
	err := c.cc.Invoke(ctx, RecordCollectionService_CommitRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordCollectionServiceClient) GetPrice(ctx context.Context, in *GetPriceRequest, opts ...grpc.CallOption) (*GetPriceResponse, error) {
	out := new(GetPriceResponse)
	err := c.cc.Invoke(ctx, RecordCollectionService_GetPrice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordCollectionServiceClient) GetInventory(ctx context.Context, in *GetInventoryRequest, opts ...grpc.CallOption) (*GetInventoryResponse, error) {
	out := new(GetInventoryResponse)
	err := c.cc.Invoke(ctx, RecordCollectionService_GetInventory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordCollectionServiceClient) DeleteSale(ctx context.Context, in *DeleteSaleRequest, opts ...grpc.CallOption) (*DeleteSaleResponse, error) {
	out := new(DeleteSaleResponse)
	err := c.cc.Invoke(ctx, RecordCollectionService_DeleteSale_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordCollectionServiceServer is the server API for RecordCollectionService service.
// All implementations should embed UnimplementedRecordCollectionServiceServer
// for forward compatibility
type RecordCollectionServiceServer interface {
	GetWants(context.Context, *GetWantsRequest) (*GetWantsResponse, error)
	UpdateRecord(context.Context, *UpdateRecordRequest) (*UpdateRecordsResponse, error)
	UpdateWant(context.Context, *UpdateWantRequest) (*UpdateWantResponse, error)
	AddRecord(context.Context, *AddRecordRequest) (*AddRecordResponse, error)
	DeleteRecord(context.Context, *DeleteRecordRequest) (*DeleteRecordResponse, error)
	QueryRecords(context.Context, *QueryRecordsRequest) (*QueryRecordsResponse, error)
	GetRecord(context.Context, *GetRecordRequest) (*GetRecordResponse, error)
	Trigger(context.Context, *TriggerRequest) (*TriggerResponse, error)
	GetUpdates(context.Context, *GetUpdatesRequest) (*GetUpdatesResponse, error)
	GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error)
	CommitRecord(context.Context, *CommitRecordRequest) (*CommitRecordResponse, error)
	GetPrice(context.Context, *GetPriceRequest) (*GetPriceResponse, error)
	GetInventory(context.Context, *GetInventoryRequest) (*GetInventoryResponse, error)
	DeleteSale(context.Context, *DeleteSaleRequest) (*DeleteSaleResponse, error)
}

// UnimplementedRecordCollectionServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRecordCollectionServiceServer struct {
}

func (UnimplementedRecordCollectionServiceServer) GetWants(context.Context, *GetWantsRequest) (*GetWantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWants not implemented")
}
func (UnimplementedRecordCollectionServiceServer) UpdateRecord(context.Context, *UpdateRecordRequest) (*UpdateRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecord not implemented")
}
func (UnimplementedRecordCollectionServiceServer) UpdateWant(context.Context, *UpdateWantRequest) (*UpdateWantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWant not implemented")
}
func (UnimplementedRecordCollectionServiceServer) AddRecord(context.Context, *AddRecordRequest) (*AddRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRecord not implemented")
}
func (UnimplementedRecordCollectionServiceServer) DeleteRecord(context.Context, *DeleteRecordRequest) (*DeleteRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecord not implemented")
}
func (UnimplementedRecordCollectionServiceServer) QueryRecords(context.Context, *QueryRecordsRequest) (*QueryRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRecords not implemented")
}
func (UnimplementedRecordCollectionServiceServer) GetRecord(context.Context, *GetRecordRequest) (*GetRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecord not implemented")
}
func (UnimplementedRecordCollectionServiceServer) Trigger(context.Context, *TriggerRequest) (*TriggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trigger not implemented")
}
func (UnimplementedRecordCollectionServiceServer) GetUpdates(context.Context, *GetUpdatesRequest) (*GetUpdatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpdates not implemented")
}
func (UnimplementedRecordCollectionServiceServer) GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedRecordCollectionServiceServer) CommitRecord(context.Context, *CommitRecordRequest) (*CommitRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitRecord not implemented")
}
func (UnimplementedRecordCollectionServiceServer) GetPrice(context.Context, *GetPriceRequest) (*GetPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrice not implemented")
}
func (UnimplementedRecordCollectionServiceServer) GetInventory(context.Context, *GetInventoryRequest) (*GetInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInventory not implemented")
}
func (UnimplementedRecordCollectionServiceServer) DeleteSale(context.Context, *DeleteSaleRequest) (*DeleteSaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSale not implemented")
}

// UnsafeRecordCollectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecordCollectionServiceServer will
// result in compilation errors.
type UnsafeRecordCollectionServiceServer interface {
	mustEmbedUnimplementedRecordCollectionServiceServer()
}

func RegisterRecordCollectionServiceServer(s grpc.ServiceRegistrar, srv RecordCollectionServiceServer) {
	s.RegisterService(&RecordCollectionService_ServiceDesc, srv)
}

func _RecordCollectionService_GetWants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordCollectionServiceServer).GetWants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordCollectionService_GetWants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordCollectionServiceServer).GetWants(ctx, req.(*GetWantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordCollectionService_UpdateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordCollectionServiceServer).UpdateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordCollectionService_UpdateRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordCollectionServiceServer).UpdateRecord(ctx, req.(*UpdateRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordCollectionService_UpdateWant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordCollectionServiceServer).UpdateWant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordCollectionService_UpdateWant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordCollectionServiceServer).UpdateWant(ctx, req.(*UpdateWantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordCollectionService_AddRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordCollectionServiceServer).AddRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordCollectionService_AddRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordCollectionServiceServer).AddRecord(ctx, req.(*AddRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordCollectionService_DeleteRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordCollectionServiceServer).DeleteRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordCollectionService_DeleteRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordCollectionServiceServer).DeleteRecord(ctx, req.(*DeleteRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordCollectionService_QueryRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordCollectionServiceServer).QueryRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordCollectionService_QueryRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordCollectionServiceServer).QueryRecords(ctx, req.(*QueryRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordCollectionService_GetRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordCollectionServiceServer).GetRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordCollectionService_GetRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordCollectionServiceServer).GetRecord(ctx, req.(*GetRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordCollectionService_Trigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordCollectionServiceServer).Trigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordCollectionService_Trigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordCollectionServiceServer).Trigger(ctx, req.(*TriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordCollectionService_GetUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUpdatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordCollectionServiceServer).GetUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordCollectionService_GetUpdates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordCollectionServiceServer).GetUpdates(ctx, req.(*GetUpdatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordCollectionService_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordCollectionServiceServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordCollectionService_GetOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordCollectionServiceServer).GetOrder(ctx, req.(*GetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordCollectionService_CommitRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordCollectionServiceServer).CommitRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordCollectionService_CommitRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordCollectionServiceServer).CommitRecord(ctx, req.(*CommitRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordCollectionService_GetPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordCollectionServiceServer).GetPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordCollectionService_GetPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordCollectionServiceServer).GetPrice(ctx, req.(*GetPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordCollectionService_GetInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordCollectionServiceServer).GetInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordCollectionService_GetInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordCollectionServiceServer).GetInventory(ctx, req.(*GetInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordCollectionService_DeleteSale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordCollectionServiceServer).DeleteSale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordCollectionService_DeleteSale_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordCollectionServiceServer).DeleteSale(ctx, req.(*DeleteSaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RecordCollectionService_ServiceDesc is the grpc.ServiceDesc for RecordCollectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecordCollectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "recordcollection.RecordCollectionService",
	HandlerType: (*RecordCollectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWants",
			Handler:    _RecordCollectionService_GetWants_Handler,
		},
		{
			MethodName: "UpdateRecord",
			Handler:    _RecordCollectionService_UpdateRecord_Handler,
		},
		{
			MethodName: "UpdateWant",
			Handler:    _RecordCollectionService_UpdateWant_Handler,
		},
		{
			MethodName: "AddRecord",
			Handler:    _RecordCollectionService_AddRecord_Handler,
		},
		{
			MethodName: "DeleteRecord",
			Handler:    _RecordCollectionService_DeleteRecord_Handler,
		},
		{
			MethodName: "QueryRecords",
			Handler:    _RecordCollectionService_QueryRecords_Handler,
		},
		{
			MethodName: "GetRecord",
			Handler:    _RecordCollectionService_GetRecord_Handler,
		},
		{
			MethodName: "Trigger",
			Handler:    _RecordCollectionService_Trigger_Handler,
		},
		{
			MethodName: "GetUpdates",
			Handler:    _RecordCollectionService_GetUpdates_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _RecordCollectionService_GetOrder_Handler,
		},
		{
			MethodName: "CommitRecord",
			Handler:    _RecordCollectionService_CommitRecord_Handler,
		},
		{
			MethodName: "GetPrice",
			Handler:    _RecordCollectionService_GetPrice_Handler,
		},
		{
			MethodName: "GetInventory",
			Handler:    _RecordCollectionService_GetInventory_Handler,
		},
		{
			MethodName: "DeleteSale",
			Handler:    _RecordCollectionService_DeleteSale_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recordcollection.proto",
}

const (
	ClientUpdateService_ClientUpdate_FullMethodName = "/recordcollection.ClientUpdateService/ClientUpdate"
)

// ClientUpdateServiceClient is the client API for ClientUpdateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientUpdateServiceClient interface {
	ClientUpdate(ctx context.Context, in *ClientUpdateRequest, opts ...grpc.CallOption) (*ClientUpdateResponse, error)
}

type clientUpdateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientUpdateServiceClient(cc grpc.ClientConnInterface) ClientUpdateServiceClient {
	return &clientUpdateServiceClient{cc}
}

func (c *clientUpdateServiceClient) ClientUpdate(ctx context.Context, in *ClientUpdateRequest, opts ...grpc.CallOption) (*ClientUpdateResponse, error) {
	out := new(ClientUpdateResponse)
	err := c.cc.Invoke(ctx, ClientUpdateService_ClientUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientUpdateServiceServer is the server API for ClientUpdateService service.
// All implementations should embed UnimplementedClientUpdateServiceServer
// for forward compatibility
type ClientUpdateServiceServer interface {
	ClientUpdate(context.Context, *ClientUpdateRequest) (*ClientUpdateResponse, error)
}

// UnimplementedClientUpdateServiceServer should be embedded to have forward compatible implementations.
type UnimplementedClientUpdateServiceServer struct {
}

func (UnimplementedClientUpdateServiceServer) ClientUpdate(context.Context, *ClientUpdateRequest) (*ClientUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientUpdate not implemented")
}

// UnsafeClientUpdateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientUpdateServiceServer will
// result in compilation errors.
type UnsafeClientUpdateServiceServer interface {
	mustEmbedUnimplementedClientUpdateServiceServer()
}

func RegisterClientUpdateServiceServer(s grpc.ServiceRegistrar, srv ClientUpdateServiceServer) {
	s.RegisterService(&ClientUpdateService_ServiceDesc, srv)
}

func _ClientUpdateService_ClientUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientUpdateServiceServer).ClientUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientUpdateService_ClientUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientUpdateServiceServer).ClientUpdate(ctx, req.(*ClientUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientUpdateService_ServiceDesc is the grpc.ServiceDesc for ClientUpdateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientUpdateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "recordcollection.ClientUpdateService",
	HandlerType: (*ClientUpdateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClientUpdate",
			Handler:    _ClientUpdateService_ClientUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recordcollection.proto",
}
