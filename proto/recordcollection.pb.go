// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: recordcollection.proto

package proto

import (
	godiscogs "github.com/brotherlogic/godiscogs"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Purgatory int32

const (
	Purgatory_UNKNOWN           Purgatory = 0
	Purgatory_NO_GOAL_FOLDER    Purgatory = 1
	Purgatory_NEEDS_STOCK_CHECK Purgatory = 2
	Purgatory_NEEDS_LABELS      Purgatory = 4
	Purgatory_NEEDS_RIP         Purgatory = 5
	Purgatory_ALL_GOOD          Purgatory = 3
)

// Enum value maps for Purgatory.
var (
	Purgatory_name = map[int32]string{
		0: "UNKNOWN",
		1: "NO_GOAL_FOLDER",
		2: "NEEDS_STOCK_CHECK",
		4: "NEEDS_LABELS",
		5: "NEEDS_RIP",
		3: "ALL_GOOD",
	}
	Purgatory_value = map[string]int32{
		"UNKNOWN":           0,
		"NO_GOAL_FOLDER":    1,
		"NEEDS_STOCK_CHECK": 2,
		"NEEDS_LABELS":      4,
		"NEEDS_RIP":         5,
		"ALL_GOOD":          3,
	}
)

func (x Purgatory) Enum() *Purgatory {
	p := new(Purgatory)
	*p = x
	return p
}

func (x Purgatory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Purgatory) Descriptor() protoreflect.EnumDescriptor {
	return file_recordcollection_proto_enumTypes[0].Descriptor()
}

func (Purgatory) Type() protoreflect.EnumType {
	return &file_recordcollection_proto_enumTypes[0]
}

func (x Purgatory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Purgatory.Descriptor instead.
func (Purgatory) EnumDescriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{0}
}

type ReleaseMetadata_Category int32

const (
	ReleaseMetadata_UNKNOWN           ReleaseMetadata_Category = 0
	ReleaseMetadata_PURCHASED         ReleaseMetadata_Category = 1
	ReleaseMetadata_UNLISTENED        ReleaseMetadata_Category = 2
	ReleaseMetadata_STAGED            ReleaseMetadata_Category = 3
	ReleaseMetadata_PRE_HIGH_SCHOOL   ReleaseMetadata_Category = 25
	ReleaseMetadata_HIGH_SCHOOL       ReleaseMetadata_Category = 26
	ReleaseMetadata_PRE_IN_COLLECTION ReleaseMetadata_Category = 36
	ReleaseMetadata_IN_COLLECTION     ReleaseMetadata_Category = 37
	ReleaseMetadata_PRE_FRESHMAN      ReleaseMetadata_Category = 4
	ReleaseMetadata_FRESHMAN          ReleaseMetadata_Category = 5
	ReleaseMetadata_PRE_SOPHMORE      ReleaseMetadata_Category = 12
	ReleaseMetadata_SOPHMORE          ReleaseMetadata_Category = 13
	ReleaseMetadata_PRE_GRADUATE      ReleaseMetadata_Category = 10
	ReleaseMetadata_GRADUATE          ReleaseMetadata_Category = 11
	ReleaseMetadata_PRE_POSTDOC       ReleaseMetadata_Category = 8
	ReleaseMetadata_POSTDOC           ReleaseMetadata_Category = 9
	ReleaseMetadata_PRE_PROFESSOR     ReleaseMetadata_Category = 6
	ReleaseMetadata_PROFESSOR         ReleaseMetadata_Category = 7
	ReleaseMetadata_PRE_DISTINGUISHED ReleaseMetadata_Category = 30
	ReleaseMetadata_DISTINGUISHED     ReleaseMetadata_Category = 31
	ReleaseMetadata_PREPARE_TO_SELL   ReleaseMetadata_Category = 19
	ReleaseMetadata_ASSESS_FOR_SALE   ReleaseMetadata_Category = 24
	ReleaseMetadata_STAGED_TO_SELL    ReleaseMetadata_Category = 14
	ReleaseMetadata_RIP_THEN_SELL     ReleaseMetadata_Category = 21
	ReleaseMetadata_SOLD              ReleaseMetadata_Category = 15
	ReleaseMetadata_SOLD_ARCHIVE      ReleaseMetadata_Category = 22
	ReleaseMetadata_LISTED_TO_SELL    ReleaseMetadata_Category = 23
	ReleaseMetadata_SOLD_OFFLINE      ReleaseMetadata_Category = 27
	ReleaseMetadata_STALE_SALE        ReleaseMetadata_Category = 28
	ReleaseMetadata_SALE_ISSUE        ReleaseMetadata_Category = 32
	ReleaseMetadata_DIGITAL           ReleaseMetadata_Category = 16
	ReleaseMetadata_GOOGLE_PLAY       ReleaseMetadata_Category = 18
	ReleaseMetadata_BANDCAMP          ReleaseMetadata_Category = 33
	ReleaseMetadata_ASSESS            ReleaseMetadata_Category = 17
	ReleaseMetadata_NO_LABELS         ReleaseMetadata_Category = 20
	ReleaseMetadata_PARENTS           ReleaseMetadata_Category = 29
	ReleaseMetadata_PRE_VALIDATE      ReleaseMetadata_Category = 34
	ReleaseMetadata_VALIDATE          ReleaseMetadata_Category = 35
	ReleaseMetadata_ARRIVED           ReleaseMetadata_Category = 38
	ReleaseMetadata_PRE_SOFT_VALIDATE ReleaseMetadata_Category = 39
	ReleaseMetadata_SOFT_VALIDATED    ReleaseMetadata_Category = 40
)

// Enum value maps for ReleaseMetadata_Category.
var (
	ReleaseMetadata_Category_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "PURCHASED",
		2:  "UNLISTENED",
		3:  "STAGED",
		25: "PRE_HIGH_SCHOOL",
		26: "HIGH_SCHOOL",
		36: "PRE_IN_COLLECTION",
		37: "IN_COLLECTION",
		4:  "PRE_FRESHMAN",
		5:  "FRESHMAN",
		12: "PRE_SOPHMORE",
		13: "SOPHMORE",
		10: "PRE_GRADUATE",
		11: "GRADUATE",
		8:  "PRE_POSTDOC",
		9:  "POSTDOC",
		6:  "PRE_PROFESSOR",
		7:  "PROFESSOR",
		30: "PRE_DISTINGUISHED",
		31: "DISTINGUISHED",
		19: "PREPARE_TO_SELL",
		24: "ASSESS_FOR_SALE",
		14: "STAGED_TO_SELL",
		21: "RIP_THEN_SELL",
		15: "SOLD",
		22: "SOLD_ARCHIVE",
		23: "LISTED_TO_SELL",
		27: "SOLD_OFFLINE",
		28: "STALE_SALE",
		32: "SALE_ISSUE",
		16: "DIGITAL",
		18: "GOOGLE_PLAY",
		33: "BANDCAMP",
		17: "ASSESS",
		20: "NO_LABELS",
		29: "PARENTS",
		34: "PRE_VALIDATE",
		35: "VALIDATE",
		38: "ARRIVED",
		39: "PRE_SOFT_VALIDATE",
		40: "SOFT_VALIDATED",
	}
	ReleaseMetadata_Category_value = map[string]int32{
		"UNKNOWN":           0,
		"PURCHASED":         1,
		"UNLISTENED":        2,
		"STAGED":            3,
		"PRE_HIGH_SCHOOL":   25,
		"HIGH_SCHOOL":       26,
		"PRE_IN_COLLECTION": 36,
		"IN_COLLECTION":     37,
		"PRE_FRESHMAN":      4,
		"FRESHMAN":          5,
		"PRE_SOPHMORE":      12,
		"SOPHMORE":          13,
		"PRE_GRADUATE":      10,
		"GRADUATE":          11,
		"PRE_POSTDOC":       8,
		"POSTDOC":           9,
		"PRE_PROFESSOR":     6,
		"PROFESSOR":         7,
		"PRE_DISTINGUISHED": 30,
		"DISTINGUISHED":     31,
		"PREPARE_TO_SELL":   19,
		"ASSESS_FOR_SALE":   24,
		"STAGED_TO_SELL":    14,
		"RIP_THEN_SELL":     21,
		"SOLD":              15,
		"SOLD_ARCHIVE":      22,
		"LISTED_TO_SELL":    23,
		"SOLD_OFFLINE":      27,
		"STALE_SALE":        28,
		"SALE_ISSUE":        32,
		"DIGITAL":           16,
		"GOOGLE_PLAY":       18,
		"BANDCAMP":          33,
		"ASSESS":            17,
		"NO_LABELS":         20,
		"PARENTS":           29,
		"PRE_VALIDATE":      34,
		"VALIDATE":          35,
		"ARRIVED":           38,
		"PRE_SOFT_VALIDATE": 39,
		"SOFT_VALIDATED":    40,
	}
)

func (x ReleaseMetadata_Category) Enum() *ReleaseMetadata_Category {
	p := new(ReleaseMetadata_Category)
	*p = x
	return p
}

func (x ReleaseMetadata_Category) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReleaseMetadata_Category) Descriptor() protoreflect.EnumDescriptor {
	return file_recordcollection_proto_enumTypes[1].Descriptor()
}

func (ReleaseMetadata_Category) Type() protoreflect.EnumType {
	return &file_recordcollection_proto_enumTypes[1]
}

func (x ReleaseMetadata_Category) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReleaseMetadata_Category.Descriptor instead.
func (ReleaseMetadata_Category) EnumDescriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{8, 0}
}

type ReleaseMetadata_KeepState int32

const (
	ReleaseMetadata_KEEP_UNKNOWN ReleaseMetadata_KeepState = 0
	ReleaseMetadata_NOT_KEEPER   ReleaseMetadata_KeepState = 1
	ReleaseMetadata_KEEPER       ReleaseMetadata_KeepState = 2
	// We want to keep this until we get a digital version
	ReleaseMetadata_DIGITAL_KEEPER ReleaseMetadata_KeepState = 3
)

// Enum value maps for ReleaseMetadata_KeepState.
var (
	ReleaseMetadata_KeepState_name = map[int32]string{
		0: "KEEP_UNKNOWN",
		1: "NOT_KEEPER",
		2: "KEEPER",
		3: "DIGITAL_KEEPER",
	}
	ReleaseMetadata_KeepState_value = map[string]int32{
		"KEEP_UNKNOWN":   0,
		"NOT_KEEPER":     1,
		"KEEPER":         2,
		"DIGITAL_KEEPER": 3,
	}
)

func (x ReleaseMetadata_KeepState) Enum() *ReleaseMetadata_KeepState {
	p := new(ReleaseMetadata_KeepState)
	*p = x
	return p
}

func (x ReleaseMetadata_KeepState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReleaseMetadata_KeepState) Descriptor() protoreflect.EnumDescriptor {
	return file_recordcollection_proto_enumTypes[2].Descriptor()
}

func (ReleaseMetadata_KeepState) Type() protoreflect.EnumType {
	return &file_recordcollection_proto_enumTypes[2]
}

func (x ReleaseMetadata_KeepState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReleaseMetadata_KeepState.Descriptor instead.
func (ReleaseMetadata_KeepState) EnumDescriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{8, 1}
}

type ReleaseMetadata_MatchState int32

const (
	ReleaseMetadata_MATCH_UNKNOWN ReleaseMetadata_MatchState = 0
	ReleaseMetadata_NO_MATCH      ReleaseMetadata_MatchState = 1
	ReleaseMetadata_PARTIAL_MATCH ReleaseMetadata_MatchState = 2
	ReleaseMetadata_FULL_MATCH    ReleaseMetadata_MatchState = 3
)

// Enum value maps for ReleaseMetadata_MatchState.
var (
	ReleaseMetadata_MatchState_name = map[int32]string{
		0: "MATCH_UNKNOWN",
		1: "NO_MATCH",
		2: "PARTIAL_MATCH",
		3: "FULL_MATCH",
	}
	ReleaseMetadata_MatchState_value = map[string]int32{
		"MATCH_UNKNOWN": 0,
		"NO_MATCH":      1,
		"PARTIAL_MATCH": 2,
		"FULL_MATCH":    3,
	}
)

func (x ReleaseMetadata_MatchState) Enum() *ReleaseMetadata_MatchState {
	p := new(ReleaseMetadata_MatchState)
	*p = x
	return p
}

func (x ReleaseMetadata_MatchState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReleaseMetadata_MatchState) Descriptor() protoreflect.EnumDescriptor {
	return file_recordcollection_proto_enumTypes[3].Descriptor()
}

func (ReleaseMetadata_MatchState) Type() protoreflect.EnumType {
	return &file_recordcollection_proto_enumTypes[3]
}

func (x ReleaseMetadata_MatchState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReleaseMetadata_MatchState.Descriptor instead.
func (ReleaseMetadata_MatchState) EnumDescriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{8, 2}
}

type ReleaseMetadata_BoxState int32

const (
	ReleaseMetadata_BOX_UNKNOWN    ReleaseMetadata_BoxState = 0
	ReleaseMetadata_OUT_OF_BOX     ReleaseMetadata_BoxState = 1
	ReleaseMetadata_IN_THE_BOX     ReleaseMetadata_BoxState = 2
	ReleaseMetadata_IN_45S_BOX     ReleaseMetadata_BoxState = 3
	ReleaseMetadata_IN_CDS_BOX     ReleaseMetadata_BoxState = 4
	ReleaseMetadata_IN_TAPE_BOX    ReleaseMetadata_BoxState = 5
	ReleaseMetadata_IN_DIGITAL_BOX ReleaseMetadata_BoxState = 6
	ReleaseMetadata_IN_BOXSET_BOX  ReleaseMetadata_BoxState = 7
)

// Enum value maps for ReleaseMetadata_BoxState.
var (
	ReleaseMetadata_BoxState_name = map[int32]string{
		0: "BOX_UNKNOWN",
		1: "OUT_OF_BOX",
		2: "IN_THE_BOX",
		3: "IN_45S_BOX",
		4: "IN_CDS_BOX",
		5: "IN_TAPE_BOX",
		6: "IN_DIGITAL_BOX",
		7: "IN_BOXSET_BOX",
	}
	ReleaseMetadata_BoxState_value = map[string]int32{
		"BOX_UNKNOWN":    0,
		"OUT_OF_BOX":     1,
		"IN_THE_BOX":     2,
		"IN_45S_BOX":     3,
		"IN_CDS_BOX":     4,
		"IN_TAPE_BOX":    5,
		"IN_DIGITAL_BOX": 6,
		"IN_BOXSET_BOX":  7,
	}
)

func (x ReleaseMetadata_BoxState) Enum() *ReleaseMetadata_BoxState {
	p := new(ReleaseMetadata_BoxState)
	*p = x
	return p
}

func (x ReleaseMetadata_BoxState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReleaseMetadata_BoxState) Descriptor() protoreflect.EnumDescriptor {
	return file_recordcollection_proto_enumTypes[4].Descriptor()
}

func (ReleaseMetadata_BoxState) Type() protoreflect.EnumType {
	return &file_recordcollection_proto_enumTypes[4]
}

func (x ReleaseMetadata_BoxState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReleaseMetadata_BoxState.Descriptor instead.
func (ReleaseMetadata_BoxState) EnumDescriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{8, 3}
}

type ReleaseMetadata_FileSize int32

const (
	ReleaseMetadata_FILE_UNKNOWN ReleaseMetadata_FileSize = 0
	ReleaseMetadata_FILE_12_INCH ReleaseMetadata_FileSize = 1
	ReleaseMetadata_FILE_7_INCH  ReleaseMetadata_FileSize = 2
	ReleaseMetadata_FILE_CD      ReleaseMetadata_FileSize = 3
	ReleaseMetadata_FILE_TAPE    ReleaseMetadata_FileSize = 4
	ReleaseMetadata_FILE_OUTSIZE ReleaseMetadata_FileSize = 5
	ReleaseMetadata_FILE_DIGITAL ReleaseMetadata_FileSize = 6
	ReleaseMetadata_FILE_BOXSET  ReleaseMetadata_FileSize = 7
)

// Enum value maps for ReleaseMetadata_FileSize.
var (
	ReleaseMetadata_FileSize_name = map[int32]string{
		0: "FILE_UNKNOWN",
		1: "FILE_12_INCH",
		2: "FILE_7_INCH",
		3: "FILE_CD",
		4: "FILE_TAPE",
		5: "FILE_OUTSIZE",
		6: "FILE_DIGITAL",
		7: "FILE_BOXSET",
	}
	ReleaseMetadata_FileSize_value = map[string]int32{
		"FILE_UNKNOWN": 0,
		"FILE_12_INCH": 1,
		"FILE_7_INCH":  2,
		"FILE_CD":      3,
		"FILE_TAPE":    4,
		"FILE_OUTSIZE": 5,
		"FILE_DIGITAL": 6,
		"FILE_BOXSET":  7,
	}
)

func (x ReleaseMetadata_FileSize) Enum() *ReleaseMetadata_FileSize {
	p := new(ReleaseMetadata_FileSize)
	*p = x
	return p
}

func (x ReleaseMetadata_FileSize) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReleaseMetadata_FileSize) Descriptor() protoreflect.EnumDescriptor {
	return file_recordcollection_proto_enumTypes[5].Descriptor()
}

func (ReleaseMetadata_FileSize) Type() protoreflect.EnumType {
	return &file_recordcollection_proto_enumTypes[5]
}

func (x ReleaseMetadata_FileSize) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReleaseMetadata_FileSize.Descriptor instead.
func (ReleaseMetadata_FileSize) EnumDescriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{8, 4}
}

type ReleaseMetadata_SleeveState int32

const (
	ReleaseMetadata_SLEEVE_UNKNOWN            ReleaseMetadata_SleeveState = 0
	ReleaseMetadata_VINYL_STORAGE_DOUBLE_FLAP ReleaseMetadata_SleeveState = 1
	ReleaseMetadata_BAGS_UNLIMITED_PLAIN      ReleaseMetadata_SleeveState = 2
	ReleaseMetadata_CUSTOM                    ReleaseMetadata_SleeveState = 3
	ReleaseMetadata_BOX_SET                   ReleaseMetadata_SleeveState = 4
	ReleaseMetadata_VINYL_STORAGE_NO_INNER    ReleaseMetadata_SleeveState = 5
	ReleaseMetadata_FIXED                     ReleaseMetadata_SleeveState = 6
)

// Enum value maps for ReleaseMetadata_SleeveState.
var (
	ReleaseMetadata_SleeveState_name = map[int32]string{
		0: "SLEEVE_UNKNOWN",
		1: "VINYL_STORAGE_DOUBLE_FLAP",
		2: "BAGS_UNLIMITED_PLAIN",
		3: "CUSTOM",
		4: "BOX_SET",
		5: "VINYL_STORAGE_NO_INNER",
		6: "FIXED",
	}
	ReleaseMetadata_SleeveState_value = map[string]int32{
		"SLEEVE_UNKNOWN":            0,
		"VINYL_STORAGE_DOUBLE_FLAP": 1,
		"BAGS_UNLIMITED_PLAIN":      2,
		"CUSTOM":                    3,
		"BOX_SET":                   4,
		"VINYL_STORAGE_NO_INNER":    5,
		"FIXED":                     6,
	}
)

func (x ReleaseMetadata_SleeveState) Enum() *ReleaseMetadata_SleeveState {
	p := new(ReleaseMetadata_SleeveState)
	*p = x
	return p
}

func (x ReleaseMetadata_SleeveState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReleaseMetadata_SleeveState) Descriptor() protoreflect.EnumDescriptor {
	return file_recordcollection_proto_enumTypes[6].Descriptor()
}

func (ReleaseMetadata_SleeveState) Type() protoreflect.EnumType {
	return &file_recordcollection_proto_enumTypes[6]
}

func (x ReleaseMetadata_SleeveState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReleaseMetadata_SleeveState.Descriptor instead.
func (ReleaseMetadata_SleeveState) EnumDescriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{8, 5}
}

type ReleaseMetadata_PurchaseLocation int32

const (
	ReleaseMetadata_LOCATION_UNKNOWN ReleaseMetadata_PurchaseLocation = 0
	ReleaseMetadata_AMOEBA           ReleaseMetadata_PurchaseLocation = 1
	ReleaseMetadata_STRANDED         ReleaseMetadata_PurchaseLocation = 2
	ReleaseMetadata_HERCULES         ReleaseMetadata_PurchaseLocation = 3
	ReleaseMetadata_DISCOGS          ReleaseMetadata_PurchaseLocation = 4
	ReleaseMetadata_GIFT             ReleaseMetadata_PurchaseLocation = 5
	ReleaseMetadata_PBANDCAMP        ReleaseMetadata_PurchaseLocation = 6
	ReleaseMetadata_DOWNLOAD         ReleaseMetadata_PurchaseLocation = 7
	ReleaseMetadata_CHERRY_RED       ReleaseMetadata_PurchaseLocation = 8
	ReleaseMetadata_BLEEP            ReleaseMetadata_PurchaseLocation = 9
	ReleaseMetadata_DIRECT           ReleaseMetadata_PurchaseLocation = 10
	ReleaseMetadata_GROOVE_MERCHANT  ReleaseMetadata_PurchaseLocation = 11
)

// Enum value maps for ReleaseMetadata_PurchaseLocation.
var (
	ReleaseMetadata_PurchaseLocation_name = map[int32]string{
		0:  "LOCATION_UNKNOWN",
		1:  "AMOEBA",
		2:  "STRANDED",
		3:  "HERCULES",
		4:  "DISCOGS",
		5:  "GIFT",
		6:  "PBANDCAMP",
		7:  "DOWNLOAD",
		8:  "CHERRY_RED",
		9:  "BLEEP",
		10: "DIRECT",
		11: "GROOVE_MERCHANT",
	}
	ReleaseMetadata_PurchaseLocation_value = map[string]int32{
		"LOCATION_UNKNOWN": 0,
		"AMOEBA":           1,
		"STRANDED":         2,
		"HERCULES":         3,
		"DISCOGS":          4,
		"GIFT":             5,
		"PBANDCAMP":        6,
		"DOWNLOAD":         7,
		"CHERRY_RED":       8,
		"BLEEP":            9,
		"DIRECT":           10,
		"GROOVE_MERCHANT":  11,
	}
)

func (x ReleaseMetadata_PurchaseLocation) Enum() *ReleaseMetadata_PurchaseLocation {
	p := new(ReleaseMetadata_PurchaseLocation)
	*p = x
	return p
}

func (x ReleaseMetadata_PurchaseLocation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReleaseMetadata_PurchaseLocation) Descriptor() protoreflect.EnumDescriptor {
	return file_recordcollection_proto_enumTypes[7].Descriptor()
}

func (ReleaseMetadata_PurchaseLocation) Type() protoreflect.EnumType {
	return &file_recordcollection_proto_enumTypes[7]
}

func (x ReleaseMetadata_PurchaseLocation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReleaseMetadata_PurchaseLocation.Descriptor instead.
func (ReleaseMetadata_PurchaseLocation) EnumDescriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{8, 6}
}

type StoredMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width int32 `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
}

func (x *StoredMetadata) Reset() {
	*x = StoredMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordcollection_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoredMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoredMetadata) ProtoMessage() {}

func (x *StoredMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_recordcollection_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoredMetadata.ProtoReflect.Descriptor instead.
func (*StoredMetadata) Descriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{0}
}

func (x *StoredMetadata) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

type Updates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId int32           `protobuf:"varint,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Updates    []*RecordUpdate `protobuf:"bytes,2,rep,name=updates,proto3" json:"updates,omitempty"`
}

func (x *Updates) Reset() {
	*x = Updates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordcollection_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Updates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Updates) ProtoMessage() {}

func (x *Updates) ProtoReflect() protoreflect.Message {
	mi := &file_recordcollection_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Updates.ProtoReflect.Descriptor instead.
func (*Updates) Descriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{1}
}

func (x *Updates) GetInstanceId() int32 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *Updates) GetUpdates() []*RecordUpdate {
	if x != nil {
		return x.Updates
	}
	return nil
}

type RecordUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Update *Record `protobuf:"bytes,2,opt,name=update,proto3" json:"update,omitempty"`
	Reason string  `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	Time   int64   `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *RecordUpdate) Reset() {
	*x = RecordUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordcollection_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordUpdate) ProtoMessage() {}

func (x *RecordUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_recordcollection_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordUpdate.ProtoReflect.Descriptor instead.
func (*RecordUpdate) Descriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{2}
}

func (x *RecordUpdate) GetUpdate() *Record {
	if x != nil {
		return x.Update
	}
	return nil
}

func (x *RecordUpdate) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *RecordUpdate) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type RecordCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records                       []*Record                          `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"` // Deprecated
	Wants                         []*godiscogs.Release               `protobuf:"bytes,2,rep,name=wants,proto3" json:"wants,omitempty"`     // DEPRECATED
	NewWants                      []*Want                            `protobuf:"bytes,3,rep,name=new_wants,json=newWants,proto3" json:"new_wants,omitempty"`
	Instances                     []int32                            `protobuf:"varint,4,rep,packed,name=instances,proto3" json:"instances,omitempty"` // DEPRECATED
	CollectionNumber              int64                              `protobuf:"varint,5,opt,name=collection_number,json=collectionNumber,proto3" json:"collection_number,omitempty"`
	InstanceToFolder              map[int32]int32                    `protobuf:"bytes,6,rep,name=instance_to_folder,json=instanceToFolder,proto3" json:"instance_to_folder,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	InstanceToUpdate              map[int32]int64                    `protobuf:"bytes,7,rep,name=instance_to_update,json=instanceToUpdate,proto3" json:"instance_to_update,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	InstanceToUpdateIn            map[int32]int64                    `protobuf:"bytes,18,rep,name=instance_to_update_in,json=instanceToUpdateIn,proto3" json:"instance_to_update_in,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	InstanceToCategory            map[int32]ReleaseMetadata_Category `protobuf:"bytes,8,rep,name=instance_to_category,json=instanceToCategory,proto3" json:"instance_to_category,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=recordcollection.ReleaseMetadata_Category"`
	InstanceToMaster              map[int32]int32                    `protobuf:"bytes,9,rep,name=instance_to_master,json=instanceToMaster,proto3" json:"instance_to_master,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	InstanceToId                  map[int32]int32                    `protobuf:"bytes,10,rep,name=instance_to_id,json=instanceToId,proto3" json:"instance_to_id,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	InstanceToRecache             map[int32]int64                    `protobuf:"bytes,13,rep,name=instance_to_recache,json=instanceToRecache,proto3" json:"instance_to_recache,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	InstanceToLastSalePriceUpdate map[int32]int64                    `protobuf:"bytes,14,rep,name=instance_to_last_sale_price_update,json=instanceToLastSalePriceUpdate,proto3" json:"instance_to_last_sale_price_update,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	SaleUpdates                   []int32                            `protobuf:"varint,11,rep,packed,name=sale_updates,json=saleUpdates,proto3" json:"sale_updates,omitempty"`
	NeedsPush                     []int32                            `protobuf:"varint,12,rep,packed,name=needs_push,json=needsPush,proto3" json:"needs_push,omitempty"` // DEPRECATED
	// The record we haven't listened to
	OldestRecord   int64   `protobuf:"varint,15,opt,name=oldest_record,json=oldestRecord,proto3" json:"oldest_record,omitempty"`
	OldestRecordId int32   `protobuf:"varint,16,opt,name=oldest_record_id,json=oldestRecordId,proto3" json:"oldest_record_id,omitempty"`
	UpdateQueue    []int32 `protobuf:"varint,17,rep,packed,name=update_queue,json=updateQueue,proto3" json:"update_queue,omitempty"`
	// The last time we did a full update
	LastFullUpdate int64 `protobuf:"varint,19,opt,name=last_full_update,json=lastFullUpdate,proto3" json:"last_full_update,omitempty"`
}

func (x *RecordCollection) Reset() {
	*x = RecordCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordcollection_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordCollection) ProtoMessage() {}

func (x *RecordCollection) ProtoReflect() protoreflect.Message {
	mi := &file_recordcollection_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordCollection.ProtoReflect.Descriptor instead.
func (*RecordCollection) Descriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{3}
}

func (x *RecordCollection) GetRecords() []*Record {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *RecordCollection) GetWants() []*godiscogs.Release {
	if x != nil {
		return x.Wants
	}
	return nil
}

func (x *RecordCollection) GetNewWants() []*Want {
	if x != nil {
		return x.NewWants
	}
	return nil
}

func (x *RecordCollection) GetInstances() []int32 {
	if x != nil {
		return x.Instances
	}
	return nil
}

func (x *RecordCollection) GetCollectionNumber() int64 {
	if x != nil {
		return x.CollectionNumber
	}
	return 0
}

func (x *RecordCollection) GetInstanceToFolder() map[int32]int32 {
	if x != nil {
		return x.InstanceToFolder
	}
	return nil
}

func (x *RecordCollection) GetInstanceToUpdate() map[int32]int64 {
	if x != nil {
		return x.InstanceToUpdate
	}
	return nil
}

func (x *RecordCollection) GetInstanceToUpdateIn() map[int32]int64 {
	if x != nil {
		return x.InstanceToUpdateIn
	}
	return nil
}

func (x *RecordCollection) GetInstanceToCategory() map[int32]ReleaseMetadata_Category {
	if x != nil {
		return x.InstanceToCategory
	}
	return nil
}

func (x *RecordCollection) GetInstanceToMaster() map[int32]int32 {
	if x != nil {
		return x.InstanceToMaster
	}
	return nil
}

func (x *RecordCollection) GetInstanceToId() map[int32]int32 {
	if x != nil {
		return x.InstanceToId
	}
	return nil
}

func (x *RecordCollection) GetInstanceToRecache() map[int32]int64 {
	if x != nil {
		return x.InstanceToRecache
	}
	return nil
}

func (x *RecordCollection) GetInstanceToLastSalePriceUpdate() map[int32]int64 {
	if x != nil {
		return x.InstanceToLastSalePriceUpdate
	}
	return nil
}

func (x *RecordCollection) GetSaleUpdates() []int32 {
	if x != nil {
		return x.SaleUpdates
	}
	return nil
}

func (x *RecordCollection) GetNeedsPush() []int32 {
	if x != nil {
		return x.NeedsPush
	}
	return nil
}

func (x *RecordCollection) GetOldestRecord() int64 {
	if x != nil {
		return x.OldestRecord
	}
	return 0
}

func (x *RecordCollection) GetOldestRecordId() int32 {
	if x != nil {
		return x.OldestRecordId
	}
	return 0
}

func (x *RecordCollection) GetUpdateQueue() []int32 {
	if x != nil {
		return x.UpdateQueue
	}
	return nil
}

func (x *RecordCollection) GetLastFullUpdate() int64 {
	if x != nil {
		return x.LastFullUpdate
	}
	return 0
}

type AllRecords struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*Record `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *AllRecords) Reset() {
	*x = AllRecords{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordcollection_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllRecords) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllRecords) ProtoMessage() {}

func (x *AllRecords) ProtoReflect() protoreflect.Message {
	mi := &file_recordcollection_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllRecords.ProtoReflect.Descriptor instead.
func (*AllRecords) Descriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{4}
}

func (x *AllRecords) GetRecords() []*Record {
	if x != nil {
		return x.Records
	}
	return nil
}

// This is a record that we own
type Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Release  *godiscogs.Release `protobuf:"bytes,1,opt,name=release,proto3" json:"release,omitempty"`
	Metadata *ReleaseMetadata   `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Record) Reset() {
	*x = Record{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordcollection_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_recordcollection_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{5}
}

func (x *Record) GetRelease() *godiscogs.Release {
	if x != nil {
		return x.Release
	}
	return nil
}

func (x *Record) GetMetadata() *ReleaseMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type Want struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the want
	ReleaseId int32 `protobuf:"varint,1,opt,name=release_id,json=releaseId,proto3" json:"release_id,omitempty"`
	// Delete this want
	ClearWant bool `protobuf:"varint,2,opt,name=clear_want,json=clearWant,proto3" json:"clear_want,omitempty"`
}

func (x *Want) Reset() {
	*x = Want{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordcollection_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Want) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Want) ProtoMessage() {}

func (x *Want) ProtoReflect() protoreflect.Message {
	mi := &file_recordcollection_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Want.ProtoReflect.Descriptor instead.
func (*Want) Descriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{6}
}

func (x *Want) GetReleaseId() int32 {
	if x != nil {
		return x.ReleaseId
	}
	return 0
}

func (x *Want) GetClearWant() bool {
	if x != nil {
		return x.ClearWant
	}
	return false
}

// This is the discogs token
type Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *Token) Reset() {
	*x = Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordcollection_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_recordcollection_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{7}
}

func (x *Token) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type ReleaseMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The date the release was added
	DateAdded int64 `protobuf:"varint,1,opt,name=date_added,json=dateAdded,proto3" json:"date_added,omitempty"`
	// The date the release actually arrived
	DateArrived int64 `protobuf:"varint,57,opt,name=date_arrived,json=dateArrived,proto3" json:"date_arrived,omitempty"`
	// The date the release was last updated
	DateUpdated int64 `protobuf:"varint,2,opt,name=date_updated,json=dateUpdated,proto3" json:"date_updated,omitempty"`
	// The relative path to the release
	FilePath string `protobuf:"bytes,3,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	// The cost of the record in cents
	Cost int32 `protobuf:"varint,4,opt,name=cost,proto3" json:"cost,omitempty"`
	// Reported cost - the cost we report for budget
	ReportedCost int32 `protobuf:"varint,38,opt,name=reported_cost,json=reportedCost,proto3" json:"reported_cost,omitempty"`
	// If we have other copies of this
	Others bool `protobuf:"varint,5,opt,name=others,proto3" json:"others,omitempty"`
	// The id of the release this relates to
	Id int32 `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`
	// The data we last recached this release
	LastCache int64                    `protobuf:"varint,7,opt,name=last_cache,json=lastCache,proto3" json:"last_cache,omitempty"`
	Category  ReleaseMetadata_Category `protobuf:"varint,8,opt,name=category,proto3,enum=recordcollection.ReleaseMetadata_Category" json:"category,omitempty"`
	// The folder this record should be placed in
	GoalFolder int32 `protobuf:"varint,9,opt,name=goal_folder,json=goalFolder,proto3" json:"goal_folder,omitempty"`
	// If a record is dirty, it needs to send updates to discogs
	Dirty bool `protobuf:"varint,10,opt,name=dirty,proto3" json:"dirty,omitempty"`
	// The folder this record should move to
	MoveFolder int32 `protobuf:"varint,11,opt,name=move_folder,json=moveFolder,proto3" json:"move_folder,omitempty"`
	// This is the rating that should be set on the record
	SetRating    int32     `protobuf:"varint,12,opt,name=set_rating,json=setRating,proto3" json:"set_rating,omitempty"`
	LastSyncTime int64     `protobuf:"varint,13,opt,name=last_sync_time,json=lastSyncTime,proto3" json:"last_sync_time,omitempty"` // DEPRECATED
	Purgatory    Purgatory `protobuf:"varint,14,opt,name=purgatory,proto3,enum=recordcollection.Purgatory" json:"purgatory,omitempty"`
	// The last time we did a stock check
	LastStockCheck int64 `protobuf:"varint,15,opt,name=last_stock_check,json=lastStockCheck,proto3" json:"last_stock_check,omitempty"`
	// This is an overall score
	OverallScore float32 `protobuf:"fixed32,16,opt,name=overall_score,json=overallScore,proto3" json:"overall_score,omitempty"`
	// Width of spine in mm (DEPRECATED)
	SpineWidth    int32   `protobuf:"varint,17,opt,name=spine_width,json=spineWidth,proto3" json:"spine_width,omitempty"`
	RecordWidth   float32 `protobuf:"fixed32,43,opt,name=record_width,json=recordWidth,proto3" json:"record_width,omitempty"`
	WeightInGrams int32   `protobuf:"varint,56,opt,name=weight_in_grams,json=weightInGrams,proto3" json:"weight_in_grams,omitempty"`
	// Sale cost and ID if applicable
	SaleCost     int32               `protobuf:"varint,18,opt,name=sale_cost,json=saleCost,proto3" json:"sale_cost,omitempty"`
	SaleId       int32               `protobuf:"varint,19,opt,name=sale_id,json=saleId,proto3" json:"sale_id,omitempty"`
	SaleDirty    bool                `protobuf:"varint,21,opt,name=sale_dirty,json=saleDirty,proto3" json:"sale_dirty,omitempty"`
	SalePrice    int32               `protobuf:"varint,22,opt,name=sale_price,json=salePrice,proto3" json:"sale_price,omitempty"`
	SaleState    godiscogs.SaleState `protobuf:"varint,23,opt,name=sale_state,json=saleState,proto3,enum=godiscogs.SaleState" json:"sale_state,omitempty"`
	NewSalePrice int32               `protobuf:"varint,39,opt,name=new_sale_price,json=newSalePrice,proto3" json:"new_sale_price,omitempty"`
	// Reason for a move failure
	MoveFailure string `protobuf:"bytes,20,opt,name=move_failure,json=moveFailure,proto3" json:"move_failure,omitempty"` // DEPRECATED
	// The last time we were listened to
	LastListenTime int64 `protobuf:"varint,24,opt,name=last_listen_time,json=lastListenTime,proto3" json:"last_listen_time,omitempty"`
	// The path to cd rip of this record
	CdPath string `protobuf:"bytes,25,opt,name=cd_path,json=cdPath,proto3" json:"cd_path,omitempty"`
	// The time we last moved this record
	LastMoveTime int64 `protobuf:"varint,26,opt,name=last_move_time,json=lastMoveTime,proto3" json:"last_move_time,omitempty"`
	// Ref to the release instance id
	InstanceId int32 `protobuf:"varint,27,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// If we need to stock check this record
	NeedsStockCheck     bool                             `protobuf:"varint,28,opt,name=needs_stock_check,json=needsStockCheck,proto3" json:"needs_stock_check,omitempty"`
	Keep                ReleaseMetadata_KeepState        `protobuf:"varint,29,opt,name=keep,proto3,enum=recordcollection.ReleaseMetadata_KeepState" json:"keep,omitempty"`
	Match               ReleaseMetadata_MatchState       `protobuf:"varint,30,opt,name=match,proto3,enum=recordcollection.ReleaseMetadata_MatchState" json:"match,omitempty"`
	CurrentSalePrice    int32                            `protobuf:"varint,31,opt,name=current_sale_price,json=currentSalePrice,proto3" json:"current_sale_price,omitempty"`
	SalePriceUpdate     int64                            `protobuf:"varint,32,opt,name=sale_price_update,json=salePriceUpdate,proto3" json:"sale_price_update,omitempty"`
	LastSalePriceUpdate int64                            `protobuf:"varint,40,opt,name=last_sale_price_update,json=lastSalePriceUpdate,proto3" json:"last_sale_price_update,omitempty"`
	LastSaveTime        int64                            `protobuf:"varint,33,opt,name=last_save_time,json=lastSaveTime,proto3" json:"last_save_time,omitempty"`
	SaveIteration       int64                            `protobuf:"varint,34,opt,name=save_iteration,json=saveIteration,proto3" json:"save_iteration,omitempty"`
	NextUpdateTime      int64                            `protobuf:"varint,35,opt,name=next_update_time,json=nextUpdateTime,proto3" json:"next_update_time,omitempty"`
	LastUpdateTime      int64                            `protobuf:"varint,36,opt,name=last_update_time,json=lastUpdateTime,proto3" json:"last_update_time,omitempty"`
	AccountingYear      int32                            `protobuf:"varint,37,opt,name=accounting_year,json=accountingYear,proto3" json:"accounting_year,omitempty"`
	ExpireSale          bool                             `protobuf:"varint,41,opt,name=expire_sale,json=expireSale,proto3" json:"expire_sale,omitempty"`
	LastInfoUpdate      int64                            `protobuf:"varint,42,opt,name=last_info_update,json=lastInfoUpdate,proto3" json:"last_info_update,omitempty"`
	SaleAttempts        int32                            `protobuf:"varint,44,opt,name=sale_attempts,json=saleAttempts,proto3" json:"sale_attempts,omitempty"`
	LastUpdateIn        int64                            `protobuf:"varint,45,opt,name=last_update_in,json=lastUpdateIn,proto3" json:"last_update_in,omitempty"`
	LastValidate        int64                            `protobuf:"varint,46,opt,name=last_validate,json=lastValidate,proto3" json:"last_validate,omitempty"`
	NumHave             int32                            `protobuf:"varint,47,opt,name=num_have,json=numHave,proto3" json:"num_have,omitempty"`
	LastHave            int64                            `protobuf:"varint,48,opt,name=last_have,json=lastHave,proto3" json:"last_have,omitempty"`
	SoldDate            int64                            `protobuf:"varint,49,opt,name=sold_date,json=soldDate,proto3" json:"sold_date,omitempty"`
	SoldPrice           int32                            `protobuf:"varint,50,opt,name=sold_price,json=soldPrice,proto3" json:"sold_price,omitempty"`
	BoxState            ReleaseMetadata_BoxState         `protobuf:"varint,51,opt,name=box_state,json=boxState,proto3,enum=recordcollection.ReleaseMetadata_BoxState" json:"box_state,omitempty"`
	NewBoxState         ReleaseMetadata_BoxState         `protobuf:"varint,52,opt,name=new_box_state,json=newBoxState,proto3,enum=recordcollection.ReleaseMetadata_BoxState" json:"new_box_state,omitempty"`
	LastCleanDate       int64                            `protobuf:"varint,53,opt,name=last_clean_date,json=lastCleanDate,proto3" json:"last_clean_date,omitempty"`
	FiledUnder          ReleaseMetadata_FileSize         `protobuf:"varint,54,opt,name=filed_under,json=filedUnder,proto3,enum=recordcollection.ReleaseMetadata_FileSize" json:"filed_under,omitempty"`
	LastCheckDate       int64                            `protobuf:"varint,55,opt,name=last_check_date,json=lastCheckDate,proto3" json:"last_check_date,omitempty"`
	LastAudition        int64                            `protobuf:"varint,58,opt,name=last_audition,json=lastAudition,proto3" json:"last_audition,omitempty"`
	AuditionScore       int32                            `protobuf:"varint,61,opt,name=audition_score,json=auditionScore,proto3" json:"audition_score,omitempty"`
	Sleeve              ReleaseMetadata_SleeveState      `protobuf:"varint,59,opt,name=sleeve,proto3,enum=recordcollection.ReleaseMetadata_SleeveState" json:"sleeve,omitempty"`
	PurchaseLocation    ReleaseMetadata_PurchaseLocation `protobuf:"varint,60,opt,name=purchase_location,json=purchaseLocation,proto3,enum=recordcollection.ReleaseMetadata_PurchaseLocation" json:"purchase_location,omitempty"`
	PurchaseBudget      string                           `protobuf:"bytes,62,opt,name=purchase_budget,json=purchaseBudget,proto3" json:"purchase_budget,omitempty"`
}

func (x *ReleaseMetadata) Reset() {
	*x = ReleaseMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordcollection_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseMetadata) ProtoMessage() {}

func (x *ReleaseMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_recordcollection_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseMetadata.ProtoReflect.Descriptor instead.
func (*ReleaseMetadata) Descriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{8}
}

func (x *ReleaseMetadata) GetDateAdded() int64 {
	if x != nil {
		return x.DateAdded
	}
	return 0
}

func (x *ReleaseMetadata) GetDateArrived() int64 {
	if x != nil {
		return x.DateArrived
	}
	return 0
}

func (x *ReleaseMetadata) GetDateUpdated() int64 {
	if x != nil {
		return x.DateUpdated
	}
	return 0
}

func (x *ReleaseMetadata) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *ReleaseMetadata) GetCost() int32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *ReleaseMetadata) GetReportedCost() int32 {
	if x != nil {
		return x.ReportedCost
	}
	return 0
}

func (x *ReleaseMetadata) GetOthers() bool {
	if x != nil {
		return x.Others
	}
	return false
}

func (x *ReleaseMetadata) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReleaseMetadata) GetLastCache() int64 {
	if x != nil {
		return x.LastCache
	}
	return 0
}

func (x *ReleaseMetadata) GetCategory() ReleaseMetadata_Category {
	if x != nil {
		return x.Category
	}
	return ReleaseMetadata_UNKNOWN
}

func (x *ReleaseMetadata) GetGoalFolder() int32 {
	if x != nil {
		return x.GoalFolder
	}
	return 0
}

func (x *ReleaseMetadata) GetDirty() bool {
	if x != nil {
		return x.Dirty
	}
	return false
}

func (x *ReleaseMetadata) GetMoveFolder() int32 {
	if x != nil {
		return x.MoveFolder
	}
	return 0
}

func (x *ReleaseMetadata) GetSetRating() int32 {
	if x != nil {
		return x.SetRating
	}
	return 0
}

func (x *ReleaseMetadata) GetLastSyncTime() int64 {
	if x != nil {
		return x.LastSyncTime
	}
	return 0
}

func (x *ReleaseMetadata) GetPurgatory() Purgatory {
	if x != nil {
		return x.Purgatory
	}
	return Purgatory_UNKNOWN
}

func (x *ReleaseMetadata) GetLastStockCheck() int64 {
	if x != nil {
		return x.LastStockCheck
	}
	return 0
}

func (x *ReleaseMetadata) GetOverallScore() float32 {
	if x != nil {
		return x.OverallScore
	}
	return 0
}

func (x *ReleaseMetadata) GetSpineWidth() int32 {
	if x != nil {
		return x.SpineWidth
	}
	return 0
}

func (x *ReleaseMetadata) GetRecordWidth() float32 {
	if x != nil {
		return x.RecordWidth
	}
	return 0
}

func (x *ReleaseMetadata) GetWeightInGrams() int32 {
	if x != nil {
		return x.WeightInGrams
	}
	return 0
}

func (x *ReleaseMetadata) GetSaleCost() int32 {
	if x != nil {
		return x.SaleCost
	}
	return 0
}

func (x *ReleaseMetadata) GetSaleId() int32 {
	if x != nil {
		return x.SaleId
	}
	return 0
}

func (x *ReleaseMetadata) GetSaleDirty() bool {
	if x != nil {
		return x.SaleDirty
	}
	return false
}

func (x *ReleaseMetadata) GetSalePrice() int32 {
	if x != nil {
		return x.SalePrice
	}
	return 0
}

func (x *ReleaseMetadata) GetSaleState() godiscogs.SaleState {
	if x != nil {
		return x.SaleState
	}
	return godiscogs.SaleState_NOT_FOR_SALE
}

func (x *ReleaseMetadata) GetNewSalePrice() int32 {
	if x != nil {
		return x.NewSalePrice
	}
	return 0
}

func (x *ReleaseMetadata) GetMoveFailure() string {
	if x != nil {
		return x.MoveFailure
	}
	return ""
}

func (x *ReleaseMetadata) GetLastListenTime() int64 {
	if x != nil {
		return x.LastListenTime
	}
	return 0
}

func (x *ReleaseMetadata) GetCdPath() string {
	if x != nil {
		return x.CdPath
	}
	return ""
}

func (x *ReleaseMetadata) GetLastMoveTime() int64 {
	if x != nil {
		return x.LastMoveTime
	}
	return 0
}

func (x *ReleaseMetadata) GetInstanceId() int32 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *ReleaseMetadata) GetNeedsStockCheck() bool {
	if x != nil {
		return x.NeedsStockCheck
	}
	return false
}

func (x *ReleaseMetadata) GetKeep() ReleaseMetadata_KeepState {
	if x != nil {
		return x.Keep
	}
	return ReleaseMetadata_KEEP_UNKNOWN
}

func (x *ReleaseMetadata) GetMatch() ReleaseMetadata_MatchState {
	if x != nil {
		return x.Match
	}
	return ReleaseMetadata_MATCH_UNKNOWN
}

func (x *ReleaseMetadata) GetCurrentSalePrice() int32 {
	if x != nil {
		return x.CurrentSalePrice
	}
	return 0
}

func (x *ReleaseMetadata) GetSalePriceUpdate() int64 {
	if x != nil {
		return x.SalePriceUpdate
	}
	return 0
}

func (x *ReleaseMetadata) GetLastSalePriceUpdate() int64 {
	if x != nil {
		return x.LastSalePriceUpdate
	}
	return 0
}

func (x *ReleaseMetadata) GetLastSaveTime() int64 {
	if x != nil {
		return x.LastSaveTime
	}
	return 0
}

func (x *ReleaseMetadata) GetSaveIteration() int64 {
	if x != nil {
		return x.SaveIteration
	}
	return 0
}

func (x *ReleaseMetadata) GetNextUpdateTime() int64 {
	if x != nil {
		return x.NextUpdateTime
	}
	return 0
}

func (x *ReleaseMetadata) GetLastUpdateTime() int64 {
	if x != nil {
		return x.LastUpdateTime
	}
	return 0
}

func (x *ReleaseMetadata) GetAccountingYear() int32 {
	if x != nil {
		return x.AccountingYear
	}
	return 0
}

func (x *ReleaseMetadata) GetExpireSale() bool {
	if x != nil {
		return x.ExpireSale
	}
	return false
}

func (x *ReleaseMetadata) GetLastInfoUpdate() int64 {
	if x != nil {
		return x.LastInfoUpdate
	}
	return 0
}

func (x *ReleaseMetadata) GetSaleAttempts() int32 {
	if x != nil {
		return x.SaleAttempts
	}
	return 0
}

func (x *ReleaseMetadata) GetLastUpdateIn() int64 {
	if x != nil {
		return x.LastUpdateIn
	}
	return 0
}

func (x *ReleaseMetadata) GetLastValidate() int64 {
	if x != nil {
		return x.LastValidate
	}
	return 0
}

func (x *ReleaseMetadata) GetNumHave() int32 {
	if x != nil {
		return x.NumHave
	}
	return 0
}

func (x *ReleaseMetadata) GetLastHave() int64 {
	if x != nil {
		return x.LastHave
	}
	return 0
}

func (x *ReleaseMetadata) GetSoldDate() int64 {
	if x != nil {
		return x.SoldDate
	}
	return 0
}

func (x *ReleaseMetadata) GetSoldPrice() int32 {
	if x != nil {
		return x.SoldPrice
	}
	return 0
}

func (x *ReleaseMetadata) GetBoxState() ReleaseMetadata_BoxState {
	if x != nil {
		return x.BoxState
	}
	return ReleaseMetadata_BOX_UNKNOWN
}

func (x *ReleaseMetadata) GetNewBoxState() ReleaseMetadata_BoxState {
	if x != nil {
		return x.NewBoxState
	}
	return ReleaseMetadata_BOX_UNKNOWN
}

func (x *ReleaseMetadata) GetLastCleanDate() int64 {
	if x != nil {
		return x.LastCleanDate
	}
	return 0
}

func (x *ReleaseMetadata) GetFiledUnder() ReleaseMetadata_FileSize {
	if x != nil {
		return x.FiledUnder
	}
	return ReleaseMetadata_FILE_UNKNOWN
}

func (x *ReleaseMetadata) GetLastCheckDate() int64 {
	if x != nil {
		return x.LastCheckDate
	}
	return 0
}

func (x *ReleaseMetadata) GetLastAudition() int64 {
	if x != nil {
		return x.LastAudition
	}
	return 0
}

func (x *ReleaseMetadata) GetAuditionScore() int32 {
	if x != nil {
		return x.AuditionScore
	}
	return 0
}

func (x *ReleaseMetadata) GetSleeve() ReleaseMetadata_SleeveState {
	if x != nil {
		return x.Sleeve
	}
	return ReleaseMetadata_SLEEVE_UNKNOWN
}

func (x *ReleaseMetadata) GetPurchaseLocation() ReleaseMetadata_PurchaseLocation {
	if x != nil {
		return x.PurchaseLocation
	}
	return ReleaseMetadata_LOCATION_UNKNOWN
}

func (x *ReleaseMetadata) GetPurchaseBudget() string {
	if x != nil {
		return x.PurchaseBudget
	}
	return ""
}

// A request to get some records
type GetRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *Record `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	// DEPRECATED
	Force bool `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
	// Return a stripped response
	Strip bool `protobuf:"varint,3,opt,name=strip,proto3" json:"strip,omitempty"`
	// Strip out for record mover
	MoveStrip bool `protobuf:"varint,4,opt,name=move_strip,json=moveStrip,proto3" json:"move_strip,omitempty"`
	// Reference the caller
	Caller string `protobuf:"bytes,5,opt,name=caller,proto3" json:"caller,omitempty"`
}

func (x *GetRecordsRequest) Reset() {
	*x = GetRecordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordcollection_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordsRequest) ProtoMessage() {}

func (x *GetRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recordcollection_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordsRequest.ProtoReflect.Descriptor instead.
func (*GetRecordsRequest) Descriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{9}
}

func (x *GetRecordsRequest) GetFilter() *Record {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetRecordsRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *GetRecordsRequest) GetStrip() bool {
	if x != nil {
		return x.Strip
	}
	return false
}

func (x *GetRecordsRequest) GetMoveStrip() bool {
	if x != nil {
		return x.MoveStrip
	}
	return false
}

func (x *GetRecordsRequest) GetCaller() string {
	if x != nil {
		return x.Caller
	}
	return ""
}

// A list of records in response
type GetRecordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records                []*Record `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	InternalProcessingTime int64     `protobuf:"varint,2,opt,name=internal_processing_time,json=internalProcessingTime,proto3" json:"internal_processing_time,omitempty"`
}

func (x *GetRecordsResponse) Reset() {
	*x = GetRecordsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordcollection_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordsResponse) ProtoMessage() {}

func (x *GetRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recordcollection_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordsResponse.ProtoReflect.Descriptor instead.
func (*GetRecordsResponse) Descriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{10}
}

func (x *GetRecordsResponse) GetRecords() []*Record {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *GetRecordsResponse) GetInternalProcessingTime() int64 {
	if x != nil {
		return x.InternalProcessingTime
	}
	return 0
}

// A request to get some records
type GetWantsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *Want `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *GetWantsRequest) Reset() {
	*x = GetWantsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordcollection_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWantsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWantsRequest) ProtoMessage() {}

func (x *GetWantsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recordcollection_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWantsRequest.ProtoReflect.Descriptor instead.
func (*GetWantsRequest) Descriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{11}
}

func (x *GetWantsRequest) GetFilter() *Want {
	if x != nil {
		return x.Filter
	}
	return nil
}

// A list of records in response
type GetWantsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wants []*Want `protobuf:"bytes,1,rep,name=wants,proto3" json:"wants,omitempty"`
}

func (x *GetWantsResponse) Reset() {
	*x = GetWantsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordcollection_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWantsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWantsResponse) ProtoMessage() {}

func (x *GetWantsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recordcollection_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWantsResponse.ProtoReflect.Descriptor instead.
func (*GetWantsResponse) Descriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{12}
}

func (x *GetWantsResponse) GetWants() []*Want {
	if x != nil {
		return x.Wants
	}
	return nil
}

type UpdateRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Update    *Record `protobuf:"bytes,1,opt,name=update,proto3" json:"update,omitempty"`
	Requestor string  `protobuf:"bytes,2,opt,name=requestor,proto3" json:"requestor,omitempty"`
	NoSell    bool    `protobuf:"varint,3,opt,name=no_sell,json=noSell,proto3" json:"no_sell,omitempty"`
	Reason    string  `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *UpdateRecordRequest) Reset() {
	*x = UpdateRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordcollection_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecordRequest) ProtoMessage() {}

func (x *UpdateRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recordcollection_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecordRequest.ProtoReflect.Descriptor instead.
func (*UpdateRecordRequest) Descriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateRecordRequest) GetUpdate() *Record {
	if x != nil {
		return x.Update
	}
	return nil
}

func (x *UpdateRecordRequest) GetRequestor() string {
	if x != nil {
		return x.Requestor
	}
	return ""
}

func (x *UpdateRecordRequest) GetNoSell() bool {
	if x != nil {
		return x.NoSell
	}
	return false
}

func (x *UpdateRecordRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type UpdateRecordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updated *Record `protobuf:"bytes,1,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (x *UpdateRecordsResponse) Reset() {
	*x = UpdateRecordsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordcollection_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecordsResponse) ProtoMessage() {}

func (x *UpdateRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recordcollection_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecordsResponse.ProtoReflect.Descriptor instead.
func (*UpdateRecordsResponse) Descriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateRecordsResponse) GetUpdated() *Record {
	if x != nil {
		return x.Updated
	}
	return nil
}

type UpdateWantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Update *Want `protobuf:"bytes,1,opt,name=update,proto3" json:"update,omitempty"`
	Remove bool  `protobuf:"varint,2,opt,name=remove,proto3" json:"remove,omitempty"`
}

func (x *UpdateWantRequest) Reset() {
	*x = UpdateWantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordcollection_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWantRequest) ProtoMessage() {}

func (x *UpdateWantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recordcollection_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWantRequest.ProtoReflect.Descriptor instead.
func (*UpdateWantRequest) Descriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateWantRequest) GetUpdate() *Want {
	if x != nil {
		return x.Update
	}
	return nil
}

func (x *UpdateWantRequest) GetRemove() bool {
	if x != nil {
		return x.Remove
	}
	return false
}

type UpdateWantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updated *Want `protobuf:"bytes,1,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (x *UpdateWantResponse) Reset() {
	*x = UpdateWantResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordcollection_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWantResponse) ProtoMessage() {}

func (x *UpdateWantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recordcollection_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWantResponse.ProtoReflect.Descriptor instead.
func (*UpdateWantResponse) Descriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateWantResponse) GetUpdated() *Want {
	if x != nil {
		return x.Updated
	}
	return nil
}

type AddRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToAdd *Record `protobuf:"bytes,1,opt,name=to_add,json=toAdd,proto3" json:"to_add,omitempty"`
}

func (x *AddRecordRequest) Reset() {
	*x = AddRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordcollection_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRecordRequest) ProtoMessage() {}

func (x *AddRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recordcollection_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRecordRequest.ProtoReflect.Descriptor instead.
func (*AddRecordRequest) Descriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{17}
}

func (x *AddRecordRequest) GetToAdd() *Record {
	if x != nil {
		return x.ToAdd
	}
	return nil
}

type AddRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Added *Record `protobuf:"bytes,2,opt,name=added,proto3" json:"added,omitempty"`
}

func (x *AddRecordResponse) Reset() {
	*x = AddRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordcollection_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRecordResponse) ProtoMessage() {}

func (x *AddRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recordcollection_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRecordResponse.ProtoReflect.Descriptor instead.
func (*AddRecordResponse) Descriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{18}
}

func (x *AddRecordResponse) GetAdded() *Record {
	if x != nil {
		return x.Added
	}
	return nil
}

type GetRecordCollectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetRecordCollectionRequest) Reset() {
	*x = GetRecordCollectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordcollection_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecordCollectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordCollectionRequest) ProtoMessage() {}

func (x *GetRecordCollectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recordcollection_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordCollectionRequest.ProtoReflect.Descriptor instead.
func (*GetRecordCollectionRequest) Descriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{19}
}

type GetRecordCollectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceIds []int32 `protobuf:"varint,1,rep,packed,name=instance_ids,json=instanceIds,proto3" json:"instance_ids,omitempty"`
}

func (x *GetRecordCollectionResponse) Reset() {
	*x = GetRecordCollectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordcollection_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecordCollectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordCollectionResponse) ProtoMessage() {}

func (x *GetRecordCollectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recordcollection_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordCollectionResponse.ProtoReflect.Descriptor instead.
func (*GetRecordCollectionResponse) Descriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{20}
}

func (x *GetRecordCollectionResponse) GetInstanceIds() []int32 {
	if x != nil {
		return x.InstanceIds
	}
	return nil
}

type DeleteRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId int32 `protobuf:"varint,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *DeleteRecordRequest) Reset() {
	*x = DeleteRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordcollection_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRecordRequest) ProtoMessage() {}

func (x *DeleteRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recordcollection_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRecordRequest.ProtoReflect.Descriptor instead.
func (*DeleteRecordRequest) Descriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteRecordRequest) GetInstanceId() int32 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

type DeleteRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteRecordResponse) Reset() {
	*x = DeleteRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordcollection_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRecordResponse) ProtoMessage() {}

func (x *DeleteRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recordcollection_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRecordResponse.ProtoReflect.Descriptor instead.
func (*DeleteRecordResponse) Descriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{22}
}

type QueryRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Query:
	//	*QueryRecordsRequest_FolderId
	//	*QueryRecordsRequest_UpdateTime
	//	*QueryRecordsRequest_Category
	//	*QueryRecordsRequest_MasterId
	//	*QueryRecordsRequest_ReleaseId
	//	*QueryRecordsRequest_All
	Query  isQueryRecordsRequest_Query `protobuf_oneof:"query"`
	Origin string                      `protobuf:"bytes,6,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *QueryRecordsRequest) Reset() {
	*x = QueryRecordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordcollection_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRecordsRequest) ProtoMessage() {}

func (x *QueryRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recordcollection_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRecordsRequest.ProtoReflect.Descriptor instead.
func (*QueryRecordsRequest) Descriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{23}
}

func (m *QueryRecordsRequest) GetQuery() isQueryRecordsRequest_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (x *QueryRecordsRequest) GetFolderId() int32 {
	if x, ok := x.GetQuery().(*QueryRecordsRequest_FolderId); ok {
		return x.FolderId
	}
	return 0
}

func (x *QueryRecordsRequest) GetUpdateTime() int64 {
	if x, ok := x.GetQuery().(*QueryRecordsRequest_UpdateTime); ok {
		return x.UpdateTime
	}
	return 0
}

func (x *QueryRecordsRequest) GetCategory() ReleaseMetadata_Category {
	if x, ok := x.GetQuery().(*QueryRecordsRequest_Category); ok {
		return x.Category
	}
	return ReleaseMetadata_UNKNOWN
}

func (x *QueryRecordsRequest) GetMasterId() int32 {
	if x, ok := x.GetQuery().(*QueryRecordsRequest_MasterId); ok {
		return x.MasterId
	}
	return 0
}

func (x *QueryRecordsRequest) GetReleaseId() int32 {
	if x, ok := x.GetQuery().(*QueryRecordsRequest_ReleaseId); ok {
		return x.ReleaseId
	}
	return 0
}

func (x *QueryRecordsRequest) GetAll() bool {
	if x, ok := x.GetQuery().(*QueryRecordsRequest_All); ok {
		return x.All
	}
	return false
}

func (x *QueryRecordsRequest) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

type isQueryRecordsRequest_Query interface {
	isQueryRecordsRequest_Query()
}

type QueryRecordsRequest_FolderId struct {
	FolderId int32 `protobuf:"varint,1,opt,name=folder_id,json=folderId,proto3,oneof"`
}

type QueryRecordsRequest_UpdateTime struct {
	UpdateTime int64 `protobuf:"varint,2,opt,name=update_time,json=updateTime,proto3,oneof"`
}

type QueryRecordsRequest_Category struct {
	Category ReleaseMetadata_Category `protobuf:"varint,3,opt,name=category,proto3,enum=recordcollection.ReleaseMetadata_Category,oneof"`
}

type QueryRecordsRequest_MasterId struct {
	MasterId int32 `protobuf:"varint,4,opt,name=master_id,json=masterId,proto3,oneof"`
}

type QueryRecordsRequest_ReleaseId struct {
	ReleaseId int32 `protobuf:"varint,5,opt,name=release_id,json=releaseId,proto3,oneof"`
}

type QueryRecordsRequest_All struct {
	All bool `protobuf:"varint,7,opt,name=all,proto3,oneof"`
}

func (*QueryRecordsRequest_FolderId) isQueryRecordsRequest_Query() {}

func (*QueryRecordsRequest_UpdateTime) isQueryRecordsRequest_Query() {}

func (*QueryRecordsRequest_Category) isQueryRecordsRequest_Query() {}

func (*QueryRecordsRequest_MasterId) isQueryRecordsRequest_Query() {}

func (*QueryRecordsRequest_ReleaseId) isQueryRecordsRequest_Query() {}

func (*QueryRecordsRequest_All) isQueryRecordsRequest_Query() {}

type QueryRecordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceIds []int32 `protobuf:"varint,1,rep,packed,name=instance_ids,json=instanceIds,proto3" json:"instance_ids,omitempty"`
}

func (x *QueryRecordsResponse) Reset() {
	*x = QueryRecordsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordcollection_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRecordsResponse) ProtoMessage() {}

func (x *QueryRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recordcollection_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRecordsResponse.ProtoReflect.Descriptor instead.
func (*QueryRecordsResponse) Descriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{24}
}

func (x *QueryRecordsResponse) GetInstanceIds() []int32 {
	if x != nil {
		return x.InstanceIds
	}
	return nil
}

type GetRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId int32 `protobuf:"varint,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Force      int32 `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
	Validate   bool  `protobuf:"varint,3,opt,name=validate,proto3" json:"validate,omitempty"`
	// Shortcut if this is available, returns a release only version
	ReleaseId int32 `protobuf:"varint,4,opt,name=release_id,json=releaseId,proto3" json:"release_id,omitempty"`
}

func (x *GetRecordRequest) Reset() {
	*x = GetRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordcollection_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordRequest) ProtoMessage() {}

func (x *GetRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recordcollection_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordRequest.ProtoReflect.Descriptor instead.
func (*GetRecordRequest) Descriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{25}
}

func (x *GetRecordRequest) GetInstanceId() int32 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *GetRecordRequest) GetForce() int32 {
	if x != nil {
		return x.Force
	}
	return 0
}

func (x *GetRecordRequest) GetValidate() bool {
	if x != nil {
		return x.Validate
	}
	return false
}

func (x *GetRecordRequest) GetReleaseId() int32 {
	if x != nil {
		return x.ReleaseId
	}
	return 0
}

type GetRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Record *Record `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
}

func (x *GetRecordResponse) Reset() {
	*x = GetRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordcollection_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordResponse) ProtoMessage() {}

func (x *GetRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recordcollection_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordResponse.ProtoReflect.Descriptor instead.
func (*GetRecordResponse) Descriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{26}
}

func (x *GetRecordResponse) GetRecord() *Record {
	if x != nil {
		return x.Record
	}
	return nil
}

type TriggerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TriggerRequest) Reset() {
	*x = TriggerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordcollection_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerRequest) ProtoMessage() {}

func (x *TriggerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recordcollection_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerRequest.ProtoReflect.Descriptor instead.
func (*TriggerRequest) Descriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{27}
}

type TriggerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TriggerResponse) Reset() {
	*x = TriggerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordcollection_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerResponse) ProtoMessage() {}

func (x *TriggerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recordcollection_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerResponse.ProtoReflect.Descriptor instead.
func (*TriggerResponse) Descriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{28}
}

type GetUpdatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId int32 `protobuf:"varint,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *GetUpdatesRequest) Reset() {
	*x = GetUpdatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordcollection_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUpdatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUpdatesRequest) ProtoMessage() {}

func (x *GetUpdatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recordcollection_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUpdatesRequest.ProtoReflect.Descriptor instead.
func (*GetUpdatesRequest) Descriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{29}
}

func (x *GetUpdatesRequest) GetInstanceId() int32 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

type GetUpdatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updates *Updates `protobuf:"bytes,1,opt,name=updates,proto3" json:"updates,omitempty"`
}

func (x *GetUpdatesResponse) Reset() {
	*x = GetUpdatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordcollection_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUpdatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUpdatesResponse) ProtoMessage() {}

func (x *GetUpdatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recordcollection_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUpdatesResponse.ProtoReflect.Descriptor instead.
func (*GetUpdatesResponse) Descriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{30}
}

func (x *GetUpdatesResponse) GetUpdates() *Updates {
	if x != nil {
		return x.Updates
	}
	return nil
}

type GetOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetOrderRequest) Reset() {
	*x = GetOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordcollection_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderRequest) ProtoMessage() {}

func (x *GetOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recordcollection_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderRequest.ProtoReflect.Descriptor instead.
func (*GetOrderRequest) Descriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{31}
}

func (x *GetOrderRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListingToPrice map[int32]int32 `protobuf:"bytes,2,rep,name=listing_to_price,json=listingToPrice,proto3" json:"listing_to_price,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	SaleDate       int64           `protobuf:"varint,3,opt,name=sale_date,json=saleDate,proto3" json:"sale_date,omitempty"`
}

func (x *GetOrderResponse) Reset() {
	*x = GetOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordcollection_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderResponse) ProtoMessage() {}

func (x *GetOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recordcollection_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderResponse.ProtoReflect.Descriptor instead.
func (*GetOrderResponse) Descriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{32}
}

func (x *GetOrderResponse) GetListingToPrice() map[int32]int32 {
	if x != nil {
		return x.ListingToPrice
	}
	return nil
}

func (x *GetOrderResponse) GetSaleDate() int64 {
	if x != nil {
		return x.SaleDate
	}
	return 0
}

type CommitRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId int32 `protobuf:"varint,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *CommitRecordRequest) Reset() {
	*x = CommitRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordcollection_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitRecordRequest) ProtoMessage() {}

func (x *CommitRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recordcollection_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitRecordRequest.ProtoReflect.Descriptor instead.
func (*CommitRecordRequest) Descriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{33}
}

func (x *CommitRecordRequest) GetInstanceId() int32 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

type CommitRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CommitRecordResponse) Reset() {
	*x = CommitRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordcollection_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitRecordResponse) ProtoMessage() {}

func (x *CommitRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recordcollection_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitRecordResponse.ProtoReflect.Descriptor instead.
func (*CommitRecordResponse) Descriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{34}
}

type GetPriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetPriceRequest) Reset() {
	*x = GetPriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordcollection_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPriceRequest) ProtoMessage() {}

func (x *GetPriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recordcollection_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPriceRequest.ProtoReflect.Descriptor instead.
func (*GetPriceRequest) Descriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{35}
}

func (x *GetPriceRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetPriceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price float32 `protobuf:"fixed32,1,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *GetPriceResponse) Reset() {
	*x = GetPriceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordcollection_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPriceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPriceResponse) ProtoMessage() {}

func (x *GetPriceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recordcollection_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPriceResponse.ProtoReflect.Descriptor instead.
func (*GetPriceResponse) Descriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{36}
}

func (x *GetPriceResponse) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

type ClientUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId int32 `protobuf:"varint,1,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
}

func (x *ClientUpdateRequest) Reset() {
	*x = ClientUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordcollection_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientUpdateRequest) ProtoMessage() {}

func (x *ClientUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recordcollection_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientUpdateRequest.ProtoReflect.Descriptor instead.
func (*ClientUpdateRequest) Descriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{37}
}

func (x *ClientUpdateRequest) GetInstanceId() int32 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

type ClientUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClientUpdateResponse) Reset() {
	*x = ClientUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordcollection_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientUpdateResponse) ProtoMessage() {}

func (x *ClientUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recordcollection_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientUpdateResponse.ProtoReflect.Descriptor instead.
func (*ClientUpdateResponse) Descriptor() ([]byte, []int) {
	return file_recordcollection_proto_rawDescGZIP(), []int{38}
}

var File_recordcollection_proto protoreflect.FileDescriptor

var file_recordcollection_proto_rawDesc = []byte{
	0x0a, 0x16, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x31, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x72, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x2f, 0x67, 0x6f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x67, 0x73, 0x2f, 0x67, 0x6f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x26, 0x0a,
	0x0e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x22, 0x64, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x38, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x6c, 0x0a, 0x0c, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x9f, 0x0f, 0x0a, 0x10, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32,
	0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x77, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x67, 0x73, 0x2e, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x05, 0x77, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x09,
	0x6e, 0x65, 0x77, 0x5f, 0x77, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x57, 0x61, 0x6e, 0x74, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x57, 0x61, 0x6e, 0x74,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x66, 0x0a, 0x12,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x12, 0x66, 0x0a, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x6d, 0x0a, 0x15,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x12, 0x6c, 0x0a, 0x14, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x6f, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x66, 0x0a, 0x12, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x6f, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x5a, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x6f,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x49, 0x64, 0x12, 0x69, 0x0a,
	0x13, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x6f, 0x52, 0x65, 0x63, 0x61, 0x63, 0x68, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x22, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x61,
	0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x6f, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1d, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x61, 0x6c, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x61, 0x6c, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x09, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x50, 0x75, 0x73, 0x68, 0x12, 0x23, 0x0a,
	0x0d, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6f, 0x6c,
	0x64, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x46,
	0x75, 0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x43, 0x0a, 0x15, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43,
	0x0a, 0x15, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x45, 0x0a, 0x17, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x71, 0x0a, 0x17, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a,
	0x15, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f,
	0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x6f, 0x52, 0x65, 0x63, 0x61, 0x63, 0x68, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x50, 0x0a, 0x22, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x40, 0x0a, 0x0a, 0x41,
	0x6c, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x75, 0x0a,
	0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2c, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x44, 0x0a, 0x04, 0x57, 0x61, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x65, 0x61, 0x72, 0x5f, 0x77, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x57, 0x61, 0x6e, 0x74, 0x22, 0x1d, 0x0a, 0x05, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xde, 0x1f, 0x0a, 0x0f, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x64, 0x18, 0x39, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x72, 0x69, 0x76, 0x65, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12,
	0x46, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2a, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x6f, 0x61, 0x6c, 0x5f,
	0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x6f,
	0x61, 0x6c, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x69, 0x72, 0x74,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x69, 0x72, 0x74, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x24,
	0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x70, 0x75, 0x72, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x75, 0x72, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x09, 0x70, 0x75, 0x72, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x76, 0x65,
	0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x70, 0x69, 0x6e, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x70, 0x69, 0x6e, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x57, 0x69, 0x64,
	0x74, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x6e, 0x5f,
	0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x38, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x49, 0x6e, 0x47, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61,
	0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73,
	0x61, 0x6c, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x61, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x61, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x74, 0x79, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x61, 0x6c, 0x65, 0x44, 0x69, 0x72, 0x74, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x33,
	0x0a, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x67, 0x73, 0x2e, 0x53,
	0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x73, 0x61, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x65, 0x77,
	0x53, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x76,
	0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x64, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x76,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x12, 0x3f, 0x0a, 0x04, 0x6b, 0x65, 0x65, 0x70, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2b, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x4b, 0x65, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x04, 0x6b,
	0x65, 0x65, 0x70, 0x12, 0x42, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x61, 0x6c, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x73, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x33, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73,
	0x61, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x6c, 0x61, 0x73, 0x74, 0x53, 0x61, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x61, 0x76, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x61, 0x76, 0x65, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6e,
	0x65, 0x78, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x59, 0x65, 0x61, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x53, 0x61, 0x6c,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x61, 0x6c, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x2c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x73, 0x61, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73,
	0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x69, 0x6e, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c,
	0x61, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e,
	0x75, 0x6d, 0x5f, 0x68, 0x61, 0x76, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e,
	0x75, 0x6d, 0x48, 0x61, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68,
	0x61, 0x76, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x48,
	0x61, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x6c, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x31, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x6f, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x47, 0x0a, 0x09, 0x62, 0x6f, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x42, 0x6f, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08,
	0x62, 0x6f, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f,
	0x62, 0x6f, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2a, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x42, 0x6f, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x6e, 0x65, 0x77,
	0x42, 0x6f, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x4b, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x18,
	0x36, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a,
	0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x37, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61,
	0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x3d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x45, 0x0a, 0x06, 0x73, 0x6c, 0x65, 0x65, 0x76, 0x65, 0x18, 0x3b, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2d, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x65, 0x65, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x06, 0x73, 0x6c, 0x65, 0x65, 0x76, 0x65, 0x12, 0x5f, 0x0a, 0x11, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x18, 0x3e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x42, 0x75, 0x64, 0x67,
	0x65, 0x74, 0x22, 0xbb, 0x05, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x55,
	0x4e, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x54, 0x41, 0x47, 0x45, 0x44, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x45, 0x5f, 0x48,
	0x49, 0x47, 0x48, 0x5f, 0x53, 0x43, 0x48, 0x4f, 0x4f, 0x4c, 0x10, 0x19, 0x12, 0x0f, 0x0a, 0x0b,
	0x48, 0x49, 0x47, 0x48, 0x5f, 0x53, 0x43, 0x48, 0x4f, 0x4f, 0x4c, 0x10, 0x1a, 0x12, 0x15, 0x0a,
	0x11, 0x50, 0x52, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x24, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x25, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x45, 0x5f, 0x46,
	0x52, 0x45, 0x53, 0x48, 0x4d, 0x41, 0x4e, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x52, 0x45,
	0x53, 0x48, 0x4d, 0x41, 0x4e, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x45, 0x5f, 0x53,
	0x4f, 0x50, 0x48, 0x4d, 0x4f, 0x52, 0x45, 0x10, 0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x4f, 0x50,
	0x48, 0x4d, 0x4f, 0x52, 0x45, 0x10, 0x0d, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x45, 0x5f, 0x47,
	0x52, 0x41, 0x44, 0x55, 0x41, 0x54, 0x45, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x52, 0x41,
	0x44, 0x55, 0x41, 0x54, 0x45, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x45, 0x5f, 0x50,
	0x4f, 0x53, 0x54, 0x44, 0x4f, 0x43, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x4f, 0x53, 0x54,
	0x44, 0x4f, 0x43, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x46, 0x45, 0x53, 0x53, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x4f, 0x46,
	0x45, 0x53, 0x53, 0x4f, 0x52, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x45, 0x5f, 0x44,
	0x49, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x55, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x1e, 0x12, 0x11,
	0x0a, 0x0d, 0x44, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x55, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10,
	0x1f, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x4f, 0x5f,
	0x53, 0x45, 0x4c, 0x4c, 0x10, 0x13, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x53, 0x53, 0x45, 0x53, 0x53,
	0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x53, 0x41, 0x4c, 0x45, 0x10, 0x18, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x54, 0x41, 0x47, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x0e, 0x12,
	0x11, 0x0a, 0x0d, 0x52, 0x49, 0x50, 0x5f, 0x54, 0x48, 0x45, 0x4e, 0x5f, 0x53, 0x45, 0x4c, 0x4c,
	0x10, 0x15, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x4f, 0x4c, 0x44, 0x10, 0x0f, 0x12, 0x10, 0x0a, 0x0c,
	0x53, 0x4f, 0x4c, 0x44, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x10, 0x16, 0x12, 0x12,
	0x0a, 0x0e, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x45, 0x4c, 0x4c,
	0x10, 0x17, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x4f, 0x4c, 0x44, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49,
	0x4e, 0x45, 0x10, 0x1b, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41, 0x4c, 0x45, 0x5f, 0x53, 0x41,
	0x4c, 0x45, 0x10, 0x1c, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x41, 0x4c, 0x45, 0x5f, 0x49, 0x53, 0x53,
	0x55, 0x45, 0x10, 0x20, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x49, 0x47, 0x49, 0x54, 0x41, 0x4c, 0x10,
	0x10, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59,
	0x10, 0x12, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x41, 0x4e, 0x44, 0x43, 0x41, 0x4d, 0x50, 0x10, 0x21,
	0x12, 0x0a, 0x0a, 0x06, 0x41, 0x53, 0x53, 0x45, 0x53, 0x53, 0x10, 0x11, 0x12, 0x0d, 0x0a, 0x09,
	0x4e, 0x4f, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x53, 0x10, 0x14, 0x12, 0x0b, 0x0a, 0x07, 0x50,
	0x41, 0x52, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x1d, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x45, 0x5f,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x10, 0x22, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x10, 0x23, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x52, 0x52, 0x49,
	0x56, 0x45, 0x44, 0x10, 0x26, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x45, 0x5f, 0x53, 0x4f, 0x46,
	0x54, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x10, 0x27, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x4f, 0x46, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x28,
	0x22, 0x4d, 0x0a, 0x09, 0x4b, 0x65, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a,
	0x0c, 0x4b, 0x45, 0x45, 0x50, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x54, 0x5f, 0x4b, 0x45, 0x45, 0x50, 0x45, 0x52, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x4b, 0x45, 0x45, 0x50, 0x45, 0x52, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x44,
	0x49, 0x47, 0x49, 0x54, 0x41, 0x4c, 0x5f, 0x4b, 0x45, 0x45, 0x50, 0x45, 0x52, 0x10, 0x03, 0x22,
	0x50, 0x0a, 0x0a, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x11, 0x0a,
	0x0d, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10,
	0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10,
	0x03, 0x22, 0x93, 0x01, 0x0a, 0x08, 0x42, 0x6f, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0f,
	0x0a, 0x0b, 0x42, 0x4f, 0x58, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x42, 0x4f, 0x58, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x42, 0x4f, 0x58, 0x10, 0x02, 0x12,
	0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x5f, 0x34, 0x35, 0x53, 0x5f, 0x42, 0x4f, 0x58, 0x10, 0x03, 0x12,
	0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x5f, 0x43, 0x44, 0x53, 0x5f, 0x42, 0x4f, 0x58, 0x10, 0x04, 0x12,
	0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x54, 0x41, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x58, 0x10, 0x05,
	0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x5f, 0x44, 0x49, 0x47, 0x49, 0x54, 0x41, 0x4c, 0x5f, 0x42,
	0x4f, 0x58, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x5f, 0x42, 0x4f, 0x58, 0x53, 0x45,
	0x54, 0x5f, 0x42, 0x4f, 0x58, 0x10, 0x07, 0x22, 0x90, 0x01, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x31,
	0x32, 0x5f, 0x49, 0x4e, 0x43, 0x48, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x37, 0x5f, 0x49, 0x4e, 0x43, 0x48, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x43, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54,
	0x41, 0x50, 0x45, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4f, 0x55,
	0x54, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x44, 0x49, 0x47, 0x49, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x42, 0x4f, 0x58, 0x53, 0x45, 0x54, 0x10, 0x07, 0x22, 0x9a, 0x01, 0x0a, 0x0b, 0x53,
	0x6c, 0x65, 0x65, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4c,
	0x45, 0x45, 0x56, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1d,
	0x0a, 0x19, 0x56, 0x49, 0x4e, 0x59, 0x4c, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f,
	0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x5f, 0x46, 0x4c, 0x41, 0x50, 0x10, 0x01, 0x12, 0x18, 0x0a,
	0x14, 0x42, 0x41, 0x47, 0x53, 0x5f, 0x55, 0x4e, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x5f,
	0x50, 0x4c, 0x41, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x58, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x04,
	0x12, 0x1a, 0x0a, 0x16, 0x56, 0x49, 0x4e, 0x59, 0x4c, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47,
	0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x49, 0x4e, 0x4e, 0x45, 0x52, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05,
	0x46, 0x49, 0x58, 0x45, 0x44, 0x10, 0x06, 0x22, 0xc0, 0x01, 0x0a, 0x10, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x10,
	0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x4d, 0x4f, 0x45, 0x42, 0x41, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x53, 0x54, 0x52, 0x41, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x48, 0x45, 0x52, 0x43, 0x55, 0x4c, 0x45, 0x53, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x49,
	0x53, 0x43, 0x4f, 0x47, 0x53, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x49, 0x46, 0x54, 0x10,
	0x05, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x42, 0x41, 0x4e, 0x44, 0x43, 0x41, 0x4d, 0x50, 0x10, 0x06,
	0x12, 0x0c, 0x0a, 0x08, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x07, 0x12, 0x0e,
	0x0a, 0x0a, 0x43, 0x48, 0x45, 0x52, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x44, 0x10, 0x08, 0x12, 0x09,
	0x0a, 0x05, 0x42, 0x4c, 0x45, 0x45, 0x50, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x49, 0x52,
	0x45, 0x43, 0x54, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x52, 0x4f, 0x4f, 0x56, 0x45, 0x5f,
	0x4d, 0x45, 0x52, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x10, 0x0b, 0x22, 0xa8, 0x01, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x30, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x72, 0x69,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74, 0x72, 0x69, 0x70, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x72, 0x69, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x82, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x07,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x38, 0x0a, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x41, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x57, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x57, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x40, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2c, 0x0a, 0x05, 0x77, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x61, 0x6e, 0x74, 0x52, 0x05, 0x77, 0x61, 0x6e, 0x74, 0x73, 0x22,
	0x96, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x5f, 0x73, 0x65,
	0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x6f, 0x53, 0x65, 0x6c, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x32, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x5b, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x61,
	0x6e, 0x74, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x22, 0x46, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x61, 0x6e,
	0x74, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x43, 0x0a, 0x10, 0x41, 0x64,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f,
	0x0a, 0x06, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x05, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x22,
	0x43, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x05, 0x61,
	0x64, 0x64, 0x65, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x40, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x73, 0x22, 0x36, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x16, 0x0a, 0x14,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x96, 0x02, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x09,
	0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x48,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2a, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x48, 0x00, 0x52, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x09, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x09, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x39, 0x0a,
	0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x22,
	0x45, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x10, 0x0a, 0x0e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x11, 0x0a, 0x0f, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x22, 0x49, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x21, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0xd4, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x6f, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x54,
	0x6f, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x61, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x1a, 0x41, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x6f,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x36, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x16,
	0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x28, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x22, 0x35, 0x0a, 0x13, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2a, 0x72, 0x0a, 0x09, 0x50, 0x75, 0x72, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x4e, 0x4f, 0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x5f, 0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x4e, 0x45, 0x45, 0x44, 0x53, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f,
	0x43, 0x48, 0x45, 0x43, 0x4b, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x45, 0x45, 0x44, 0x53,
	0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x53, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x45, 0x45,
	0x44, 0x53, 0x5f, 0x52, 0x49, 0x50, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4c, 0x4c, 0x5f,
	0x47, 0x4f, 0x4f, 0x44, 0x10, 0x03, 0x32, 0xd5, 0x08, 0x0a, 0x17, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x53, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x21,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x25, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x57, 0x61, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x57, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x22, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x25, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a,
	0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x25, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x22, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x07, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x12, 0x20, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x21, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x25, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x08, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x76,
	0x0a, 0x13, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5f, 0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x72, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_recordcollection_proto_rawDescOnce sync.Once
	file_recordcollection_proto_rawDescData = file_recordcollection_proto_rawDesc
)

func file_recordcollection_proto_rawDescGZIP() []byte {
	file_recordcollection_proto_rawDescOnce.Do(func() {
		file_recordcollection_proto_rawDescData = protoimpl.X.CompressGZIP(file_recordcollection_proto_rawDescData)
	})
	return file_recordcollection_proto_rawDescData
}

var file_recordcollection_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_recordcollection_proto_msgTypes = make([]protoimpl.MessageInfo, 48)
var file_recordcollection_proto_goTypes = []interface{}{
	(Purgatory)(0),                        // 0: recordcollection.Purgatory
	(ReleaseMetadata_Category)(0),         // 1: recordcollection.ReleaseMetadata.Category
	(ReleaseMetadata_KeepState)(0),        // 2: recordcollection.ReleaseMetadata.KeepState
	(ReleaseMetadata_MatchState)(0),       // 3: recordcollection.ReleaseMetadata.MatchState
	(ReleaseMetadata_BoxState)(0),         // 4: recordcollection.ReleaseMetadata.BoxState
	(ReleaseMetadata_FileSize)(0),         // 5: recordcollection.ReleaseMetadata.FileSize
	(ReleaseMetadata_SleeveState)(0),      // 6: recordcollection.ReleaseMetadata.SleeveState
	(ReleaseMetadata_PurchaseLocation)(0), // 7: recordcollection.ReleaseMetadata.PurchaseLocation
	(*StoredMetadata)(nil),                // 8: recordcollection.StoredMetadata
	(*Updates)(nil),                       // 9: recordcollection.Updates
	(*RecordUpdate)(nil),                  // 10: recordcollection.RecordUpdate
	(*RecordCollection)(nil),              // 11: recordcollection.RecordCollection
	(*AllRecords)(nil),                    // 12: recordcollection.AllRecords
	(*Record)(nil),                        // 13: recordcollection.Record
	(*Want)(nil),                          // 14: recordcollection.Want
	(*Token)(nil),                         // 15: recordcollection.Token
	(*ReleaseMetadata)(nil),               // 16: recordcollection.ReleaseMetadata
	(*GetRecordsRequest)(nil),             // 17: recordcollection.GetRecordsRequest
	(*GetRecordsResponse)(nil),            // 18: recordcollection.GetRecordsResponse
	(*GetWantsRequest)(nil),               // 19: recordcollection.GetWantsRequest
	(*GetWantsResponse)(nil),              // 20: recordcollection.GetWantsResponse
	(*UpdateRecordRequest)(nil),           // 21: recordcollection.UpdateRecordRequest
	(*UpdateRecordsResponse)(nil),         // 22: recordcollection.UpdateRecordsResponse
	(*UpdateWantRequest)(nil),             // 23: recordcollection.UpdateWantRequest
	(*UpdateWantResponse)(nil),            // 24: recordcollection.UpdateWantResponse
	(*AddRecordRequest)(nil),              // 25: recordcollection.AddRecordRequest
	(*AddRecordResponse)(nil),             // 26: recordcollection.AddRecordResponse
	(*GetRecordCollectionRequest)(nil),    // 27: recordcollection.GetRecordCollectionRequest
	(*GetRecordCollectionResponse)(nil),   // 28: recordcollection.GetRecordCollectionResponse
	(*DeleteRecordRequest)(nil),           // 29: recordcollection.DeleteRecordRequest
	(*DeleteRecordResponse)(nil),          // 30: recordcollection.DeleteRecordResponse
	(*QueryRecordsRequest)(nil),           // 31: recordcollection.QueryRecordsRequest
	(*QueryRecordsResponse)(nil),          // 32: recordcollection.QueryRecordsResponse
	(*GetRecordRequest)(nil),              // 33: recordcollection.GetRecordRequest
	(*GetRecordResponse)(nil),             // 34: recordcollection.GetRecordResponse
	(*TriggerRequest)(nil),                // 35: recordcollection.TriggerRequest
	(*TriggerResponse)(nil),               // 36: recordcollection.TriggerResponse
	(*GetUpdatesRequest)(nil),             // 37: recordcollection.GetUpdatesRequest
	(*GetUpdatesResponse)(nil),            // 38: recordcollection.GetUpdatesResponse
	(*GetOrderRequest)(nil),               // 39: recordcollection.GetOrderRequest
	(*GetOrderResponse)(nil),              // 40: recordcollection.GetOrderResponse
	(*CommitRecordRequest)(nil),           // 41: recordcollection.CommitRecordRequest
	(*CommitRecordResponse)(nil),          // 42: recordcollection.CommitRecordResponse
	(*GetPriceRequest)(nil),               // 43: recordcollection.GetPriceRequest
	(*GetPriceResponse)(nil),              // 44: recordcollection.GetPriceResponse
	(*ClientUpdateRequest)(nil),           // 45: recordcollection.ClientUpdateRequest
	(*ClientUpdateResponse)(nil),          // 46: recordcollection.ClientUpdateResponse
	nil,                                   // 47: recordcollection.RecordCollection.InstanceToFolderEntry
	nil,                                   // 48: recordcollection.RecordCollection.InstanceToUpdateEntry
	nil,                                   // 49: recordcollection.RecordCollection.InstanceToUpdateInEntry
	nil,                                   // 50: recordcollection.RecordCollection.InstanceToCategoryEntry
	nil,                                   // 51: recordcollection.RecordCollection.InstanceToMasterEntry
	nil,                                   // 52: recordcollection.RecordCollection.InstanceToIdEntry
	nil,                                   // 53: recordcollection.RecordCollection.InstanceToRecacheEntry
	nil,                                   // 54: recordcollection.RecordCollection.InstanceToLastSalePriceUpdateEntry
	nil,                                   // 55: recordcollection.GetOrderResponse.ListingToPriceEntry
	(*godiscogs.Release)(nil),             // 56: godiscogs.Release
	(godiscogs.SaleState)(0),              // 57: godiscogs.SaleState
}
var file_recordcollection_proto_depIdxs = []int32{
	10, // 0: recordcollection.Updates.updates:type_name -> recordcollection.RecordUpdate
	13, // 1: recordcollection.RecordUpdate.update:type_name -> recordcollection.Record
	13, // 2: recordcollection.RecordCollection.records:type_name -> recordcollection.Record
	56, // 3: recordcollection.RecordCollection.wants:type_name -> godiscogs.Release
	14, // 4: recordcollection.RecordCollection.new_wants:type_name -> recordcollection.Want
	47, // 5: recordcollection.RecordCollection.instance_to_folder:type_name -> recordcollection.RecordCollection.InstanceToFolderEntry
	48, // 6: recordcollection.RecordCollection.instance_to_update:type_name -> recordcollection.RecordCollection.InstanceToUpdateEntry
	49, // 7: recordcollection.RecordCollection.instance_to_update_in:type_name -> recordcollection.RecordCollection.InstanceToUpdateInEntry
	50, // 8: recordcollection.RecordCollection.instance_to_category:type_name -> recordcollection.RecordCollection.InstanceToCategoryEntry
	51, // 9: recordcollection.RecordCollection.instance_to_master:type_name -> recordcollection.RecordCollection.InstanceToMasterEntry
	52, // 10: recordcollection.RecordCollection.instance_to_id:type_name -> recordcollection.RecordCollection.InstanceToIdEntry
	53, // 11: recordcollection.RecordCollection.instance_to_recache:type_name -> recordcollection.RecordCollection.InstanceToRecacheEntry
	54, // 12: recordcollection.RecordCollection.instance_to_last_sale_price_update:type_name -> recordcollection.RecordCollection.InstanceToLastSalePriceUpdateEntry
	13, // 13: recordcollection.AllRecords.records:type_name -> recordcollection.Record
	56, // 14: recordcollection.Record.release:type_name -> godiscogs.Release
	16, // 15: recordcollection.Record.metadata:type_name -> recordcollection.ReleaseMetadata
	1,  // 16: recordcollection.ReleaseMetadata.category:type_name -> recordcollection.ReleaseMetadata.Category
	0,  // 17: recordcollection.ReleaseMetadata.purgatory:type_name -> recordcollection.Purgatory
	57, // 18: recordcollection.ReleaseMetadata.sale_state:type_name -> godiscogs.SaleState
	2,  // 19: recordcollection.ReleaseMetadata.keep:type_name -> recordcollection.ReleaseMetadata.KeepState
	3,  // 20: recordcollection.ReleaseMetadata.match:type_name -> recordcollection.ReleaseMetadata.MatchState
	4,  // 21: recordcollection.ReleaseMetadata.box_state:type_name -> recordcollection.ReleaseMetadata.BoxState
	4,  // 22: recordcollection.ReleaseMetadata.new_box_state:type_name -> recordcollection.ReleaseMetadata.BoxState
	5,  // 23: recordcollection.ReleaseMetadata.filed_under:type_name -> recordcollection.ReleaseMetadata.FileSize
	6,  // 24: recordcollection.ReleaseMetadata.sleeve:type_name -> recordcollection.ReleaseMetadata.SleeveState
	7,  // 25: recordcollection.ReleaseMetadata.purchase_location:type_name -> recordcollection.ReleaseMetadata.PurchaseLocation
	13, // 26: recordcollection.GetRecordsRequest.filter:type_name -> recordcollection.Record
	13, // 27: recordcollection.GetRecordsResponse.records:type_name -> recordcollection.Record
	14, // 28: recordcollection.GetWantsRequest.filter:type_name -> recordcollection.Want
	14, // 29: recordcollection.GetWantsResponse.wants:type_name -> recordcollection.Want
	13, // 30: recordcollection.UpdateRecordRequest.update:type_name -> recordcollection.Record
	13, // 31: recordcollection.UpdateRecordsResponse.updated:type_name -> recordcollection.Record
	14, // 32: recordcollection.UpdateWantRequest.update:type_name -> recordcollection.Want
	14, // 33: recordcollection.UpdateWantResponse.updated:type_name -> recordcollection.Want
	13, // 34: recordcollection.AddRecordRequest.to_add:type_name -> recordcollection.Record
	13, // 35: recordcollection.AddRecordResponse.added:type_name -> recordcollection.Record
	1,  // 36: recordcollection.QueryRecordsRequest.category:type_name -> recordcollection.ReleaseMetadata.Category
	13, // 37: recordcollection.GetRecordResponse.record:type_name -> recordcollection.Record
	9,  // 38: recordcollection.GetUpdatesResponse.updates:type_name -> recordcollection.Updates
	55, // 39: recordcollection.GetOrderResponse.listing_to_price:type_name -> recordcollection.GetOrderResponse.ListingToPriceEntry
	1,  // 40: recordcollection.RecordCollection.InstanceToCategoryEntry.value:type_name -> recordcollection.ReleaseMetadata.Category
	19, // 41: recordcollection.RecordCollectionService.GetWants:input_type -> recordcollection.GetWantsRequest
	21, // 42: recordcollection.RecordCollectionService.UpdateRecord:input_type -> recordcollection.UpdateRecordRequest
	23, // 43: recordcollection.RecordCollectionService.UpdateWant:input_type -> recordcollection.UpdateWantRequest
	25, // 44: recordcollection.RecordCollectionService.AddRecord:input_type -> recordcollection.AddRecordRequest
	29, // 45: recordcollection.RecordCollectionService.DeleteRecord:input_type -> recordcollection.DeleteRecordRequest
	31, // 46: recordcollection.RecordCollectionService.QueryRecords:input_type -> recordcollection.QueryRecordsRequest
	33, // 47: recordcollection.RecordCollectionService.GetRecord:input_type -> recordcollection.GetRecordRequest
	35, // 48: recordcollection.RecordCollectionService.Trigger:input_type -> recordcollection.TriggerRequest
	37, // 49: recordcollection.RecordCollectionService.GetUpdates:input_type -> recordcollection.GetUpdatesRequest
	39, // 50: recordcollection.RecordCollectionService.GetOrder:input_type -> recordcollection.GetOrderRequest
	41, // 51: recordcollection.RecordCollectionService.CommitRecord:input_type -> recordcollection.CommitRecordRequest
	43, // 52: recordcollection.RecordCollectionService.GetPrice:input_type -> recordcollection.GetPriceRequest
	45, // 53: recordcollection.ClientUpdateService.ClientUpdate:input_type -> recordcollection.ClientUpdateRequest
	20, // 54: recordcollection.RecordCollectionService.GetWants:output_type -> recordcollection.GetWantsResponse
	22, // 55: recordcollection.RecordCollectionService.UpdateRecord:output_type -> recordcollection.UpdateRecordsResponse
	24, // 56: recordcollection.RecordCollectionService.UpdateWant:output_type -> recordcollection.UpdateWantResponse
	26, // 57: recordcollection.RecordCollectionService.AddRecord:output_type -> recordcollection.AddRecordResponse
	30, // 58: recordcollection.RecordCollectionService.DeleteRecord:output_type -> recordcollection.DeleteRecordResponse
	32, // 59: recordcollection.RecordCollectionService.QueryRecords:output_type -> recordcollection.QueryRecordsResponse
	34, // 60: recordcollection.RecordCollectionService.GetRecord:output_type -> recordcollection.GetRecordResponse
	36, // 61: recordcollection.RecordCollectionService.Trigger:output_type -> recordcollection.TriggerResponse
	38, // 62: recordcollection.RecordCollectionService.GetUpdates:output_type -> recordcollection.GetUpdatesResponse
	40, // 63: recordcollection.RecordCollectionService.GetOrder:output_type -> recordcollection.GetOrderResponse
	42, // 64: recordcollection.RecordCollectionService.CommitRecord:output_type -> recordcollection.CommitRecordResponse
	44, // 65: recordcollection.RecordCollectionService.GetPrice:output_type -> recordcollection.GetPriceResponse
	46, // 66: recordcollection.ClientUpdateService.ClientUpdate:output_type -> recordcollection.ClientUpdateResponse
	54, // [54:67] is the sub-list for method output_type
	41, // [41:54] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_recordcollection_proto_init() }
func file_recordcollection_proto_init() {
	if File_recordcollection_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_recordcollection_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoredMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordcollection_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Updates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordcollection_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordcollection_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordcollection_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllRecords); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordcollection_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Record); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordcollection_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Want); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordcollection_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordcollection_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordcollection_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordcollection_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecordsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordcollection_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWantsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordcollection_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWantsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordcollection_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordcollection_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRecordsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordcollection_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordcollection_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWantResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordcollection_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordcollection_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordcollection_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecordCollectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordcollection_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecordCollectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordcollection_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordcollection_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordcollection_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRecordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordcollection_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRecordsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordcollection_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordcollection_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordcollection_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordcollection_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordcollection_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUpdatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordcollection_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUpdatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordcollection_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordcollection_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordcollection_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordcollection_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordcollection_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordcollection_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPriceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordcollection_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordcollection_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_recordcollection_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*QueryRecordsRequest_FolderId)(nil),
		(*QueryRecordsRequest_UpdateTime)(nil),
		(*QueryRecordsRequest_Category)(nil),
		(*QueryRecordsRequest_MasterId)(nil),
		(*QueryRecordsRequest_ReleaseId)(nil),
		(*QueryRecordsRequest_All)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_recordcollection_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   48,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_recordcollection_proto_goTypes,
		DependencyIndexes: file_recordcollection_proto_depIdxs,
		EnumInfos:         file_recordcollection_proto_enumTypes,
		MessageInfos:      file_recordcollection_proto_msgTypes,
	}.Build()
	File_recordcollection_proto = out.File
	file_recordcollection_proto_rawDesc = nil
	file_recordcollection_proto_goTypes = nil
	file_recordcollection_proto_depIdxs = nil
}
