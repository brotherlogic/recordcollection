syntax = "proto3";

package recordcollection;

option go_package = "github.com/brotherlogic/recordcollection/proto";

import "github.com/brotherlogic/godiscogs/godiscogs.proto";

message StoredMetadata {
  int32 width = 1;
}

message Updates {
  int32 instance_id = 1;
  repeated RecordUpdate updates = 2;
}

message RecordUpdate {
  Record update = 2;
  string reason = 3;
  int64 time = 4;
}

message RecordCollection {
  repeated Record records = 1; // Deprecated
  repeated godiscogs.Release wants = 2; // DEPRECATED
  repeated Want new_wants = 3;
  repeated int32 instances = 4; // DEPRECATED
  int64 collection_number = 5;
  map<int32, int32> instance_to_folder = 6;
  map<int32, int64> instance_to_update = 7;
  map<int32, int64> instance_to_update_in = 18;
  map<int32, ReleaseMetadata.Category> instance_to_category = 8;
  map<int32, int32> instance_to_master = 9;
  map<int32, int32> instance_to_id = 10;
  map<int32, int64> instance_to_recache = 13;
  map<int32, int64> instance_to_last_sale_price_update = 14;
  repeated int32 sale_updates = 11;
  repeated int32 needs_push = 12;

  // The record we haven't listened to
  int64 oldest_record = 15;
  int32 oldest_record_id = 16;

  repeated int32 update_queue = 17;

  // The last time we did a full update
  int64 last_full_update = 19;
}

message AllRecords {
  repeated Record records = 1;
}

// This is a record that we own
message Record {
  godiscogs.Release release = 1;
  ReleaseMetadata metadata = 2;
}

message Want {
  godiscogs.Release release = 1;
  WantMetadata metadata = 2;
  
  // Delete this want
  bool clear_want = 3;

  // Enable this want
  bool enable_want = 4;
}

message WantMetadata {
  bool active = 1;
}

// This is the discogs token
message Token {
  string token = 1;
}

enum Purgatory {
  UNKNOWN = 0;
  NO_GOAL_FOLDER = 1;
  NEEDS_STOCK_CHECK = 2;

  NEEDS_LABELS = 4;

  NEEDS_RIP = 5;
  
  ALL_GOOD = 3;
}

message ReleaseMetadata {
  // The date the release was added
  int64 date_added = 1;

  // The date the release actually arrived
  int64 date_arrived = 57;
  
  // The date the release was last updated
  int64 date_updated = 2;
  
  // The relative path to the release
  string file_path = 3;
  
  // The cost of the record in cents
  int32 cost = 4;
  
  // Reported cost - the cost we report for budget
  int32 reported_cost = 38;
  
  
  // If we have other copies of this
  bool others = 5;
  
  // The id of the release this relates to
  int32 id = 6;
  
  // The data we last recached this release
  int64 last_cache = 7;
  
  enum Category {
    UNKNOWN = 0;
    PURCHASED = 1;
    UNLISTENED = 2;
    STAGED = 3;

    PRE_HIGH_SCHOOL = 25;
    HIGH_SCHOOL = 26;
    
    PRE_IN_COLLECTION = 36;
    IN_COLLECTION = 37;

    PRE_FRESHMAN = 4;
    FRESHMAN = 5;
    
    PRE_SOPHMORE = 12;
    SOPHMORE = 13;

    PRE_GRADUATE = 10;
    GRADUATE = 11;
    
    PRE_POSTDOC = 8;
    POSTDOC = 9;
    
    PRE_PROFESSOR = 6;
    PROFESSOR = 7;

    PRE_DISTINGUISHED = 30;
    DISTINGUISHED = 31;
    
    PREPARE_TO_SELL = 19;
    ASSESS_FOR_SALE = 24;
    STAGED_TO_SELL = 14;
    RIP_THEN_SELL = 21;
    SOLD = 15;
    SOLD_ARCHIVE = 22;
    LISTED_TO_SELL = 23;
    SOLD_OFFLINE = 27;
    STALE_SALE = 28;
    SALE_ISSUE = 32;
    
    DIGITAL = 16;
    GOOGLE_PLAY = 18;
    BANDCAMP = 33;
    
    ASSESS = 17;
    NO_LABELS = 20;

    PARENTS = 29;

    PRE_VALIDATE = 34;
    VALIDATE = 35;

    ARRIVED = 38;
  }
  Category category = 8;
  
  // The folder this record should be placed in
  int32 goal_folder = 9;
  
  // If a record is dirty, it needs to send updates to discogs
  bool dirty = 10;

  // The folder this record should move to
  int32 move_folder = 11;

  // This is the rating that should be set on the record
  int32 set_rating = 12;

  int64 last_sync_time= 13; // DEPRECATED

  Purgatory purgatory = 14;

  // The last time we did a stock check
  int64 last_stock_check = 15;

  // This is an overall score
  float overall_score = 16;

  // Width of spine in mm (DEPRECATED)
  int32 spine_width = 17;
  float record_width = 43;
  int32 weight_in_grams = 56;

  // Sale cost and ID if applicable
  int32 sale_cost = 18;
  int32 sale_id = 19;
  bool sale_dirty = 21;
  int32 sale_price = 22;
  godiscogs.SaleState sale_state = 23;
  int32 new_sale_price = 39;
  
  // Reason for a move failure
  string move_failure = 20; // DEPRECATED

  // The last time we were listened to
  int64 last_listen_time = 24;

  // The path to cd rip of this record
  string cd_path = 25;

  // The time we last moved this record
  int64 last_move_time = 26;

  // Ref to the release instance id
  int32 instance_id = 27;

  // If we need to stock check this record
  bool needs_stock_check = 28;

  enum KeepState {
    KEEP_UNKNOWN = 0;
    NOT_KEEPER = 1;
    KEEPER = 2;
  }
  KeepState keep = 29;

  enum MatchState {
    MATCH_UNKNOWN = 0;
    NO_MATCH = 1;
    PARTIAL_MATCH = 2;
    FULL_MATCH = 3;
  }
  MatchState match = 30;

  int32 current_sale_price = 31;
  int64 sale_price_update = 32;
  int64 last_sale_price_update = 40;

  int64 last_save_time = 33;
  int64 save_iteration = 34;

  int64 next_update_time = 35;
  int64 last_update_time = 36;

  int32 accounting_year = 37;

  bool expire_sale = 41;

  int64 last_info_update = 42;

  int32 sale_attempts = 44;

  int64 last_update_in = 45;

  int64 last_validate = 46;

  int32 num_have = 47;
  int64 last_have = 48;

  int64 sold_date = 49;
  int32 sold_price = 50;

  enum BoxState {
    BOX_UNKNOWN = 0;
    OUT_OF_BOX = 1;
    IN_THE_BOX = 2;
    IN_45S_BOX = 3;
    IN_CDS_BOX = 4;
    IN_TAPE_BOX = 5;
    IN_DIGITAL_BOX = 6;
  }
  BoxState box_state = 51;
  BoxState new_box_state = 52;

  int64 last_clean_date = 53;
  enum FileSize {
    FILE_UNKNOWN = 0;
    FILE_12_INCH = 1;
    FILE_7_INCH = 2;
    FILE_CD = 3;
    FILE_TAPE = 4;
    FILE_OUTSIZE = 5;
    FILE_DIGITAL = 6;
    FILE_BOXSET = 7;
  }
  FileSize filed_under = 54;
  int64 last_check_date = 55;
}


// A request to get some records
message GetRecordsRequest {
  Record filter = 1;

  // DEPRECATED
  bool force = 2;

  // Return a stripped response
  bool strip = 3;

  // Strip out for record mover
  bool move_strip = 4;

  // Reference the caller
  string caller = 5;

}

// A list of records in response
message GetRecordsResponse {
  repeated Record records = 1;
  int64 internal_processing_time = 2;
}

// A request to get some records
message GetWantsRequest {
  Want filter = 1;
}

// A list of records in response
message GetWantsResponse {
  repeated Want wants = 1;
}

message UpdateRecordRequest {
  Record update = 1;
  string requestor = 2;
  bool no_sell = 3;
  string reason = 4;
}

message UpdateRecordsResponse {
  Record updated = 1;
}

message UpdateWantRequest {
  Want update = 1;
  bool remove = 2;
}

message UpdateWantResponse {
  Want updated = 1;
}

message AddRecordRequest {
  Record to_add = 1;
}

message AddRecordResponse {
  Record added = 2;
}

message GetRecordCollectionRequest {

}

message GetRecordCollectionResponse {
  repeated int32 instance_ids = 1;
}

message DeleteRecordRequest {
  int32 instance_id = 1;
}

message DeleteRecordResponse {}

message QueryRecordsRequest {
  oneof query {
    int32 folder_id = 1;
    int64 update_time = 2;
    ReleaseMetadata.Category category = 3;
    int32 master_id = 4;
    int32 release_id = 5;
    bool all = 7;
  }

  string origin = 6;
}

message QueryRecordsResponse {
  repeated int32 instance_ids = 1;
}

message GetRecordRequest {
  int32 instance_id = 1;
  int32 force = 2;
  bool validate = 3;

  // Shortcut if this is available, returns a release only version
  int32 release_id = 4;
}

message GetRecordResponse {
  Record record = 1;
}

message TriggerRequest{
}

message TriggerResponse{
}

message GetUpdatesRequest{
  int32 instance_id = 1;
}

message GetUpdatesResponse{
  Updates updates = 1;
}

message GetOrderRequest{
  string id = 1;
}

message GetOrderResponse{
  map<int32,int32> listing_to_price = 2;
  int64 sale_date = 3;
}

message CommitRecordRequest {
  int32 instance_id = 1;
}

message CommitRecordResponse {}

service RecordCollectionService {
  rpc GetWants(GetWantsRequest) returns (GetWantsResponse) {};
  rpc UpdateRecord(UpdateRecordRequest) returns (UpdateRecordsResponse) {};
  rpc UpdateWant(UpdateWantRequest) returns (UpdateWantResponse) {};
  rpc AddRecord(AddRecordRequest) returns (AddRecordResponse) {};
  rpc DeleteRecord(DeleteRecordRequest) returns (DeleteRecordResponse) {};
  rpc QueryRecords(QueryRecordsRequest) returns (QueryRecordsResponse) {};
  rpc GetRecord(GetRecordRequest) returns (GetRecordResponse) {};
  rpc Trigger(TriggerRequest) returns (TriggerResponse) {};
  rpc GetUpdates(GetUpdatesRequest) returns (GetUpdatesResponse) {};
  rpc GetOrder(GetOrderRequest) returns (GetOrderResponse) {};
  rpc CommitRecord(CommitRecordRequest) returns (CommitRecordResponse) {};
}

message ClientUpdateRequest{
  int32 instanceId = 1;
}

message ClientUpdateResponse {}

service ClientUpdateService {
  rpc ClientUpdate(ClientUpdateRequest) returns (ClientUpdateResponse) {};
}